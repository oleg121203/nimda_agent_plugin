#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ProjectInitializer
"""

import logging
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
sys.path.insert(0, "/Users/dev/Documents/NIMDA/NIMDA-CLI/nimda_agent_plugin")
from project_initializer_clean import ProjectInitializer


def example_python_project():
    """–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Python –ø—Ä–æ–µ–∫—Ç—É"""
    print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python –ø—Ä–æ–µ–∫—Ç—É...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    project_path = Path("/tmp/example_python_project")
    project_path.mkdir(exist_ok=True)

    # –°—Ç–≤–æ—Ä—é—î–º–æ Python —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
    (project_path / "app.py").write_text("""#!/usr/bin/env python3
# –ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –¥–æ–¥–∞—Ç–∫—É

def main():
    print("–ü—Ä–∏–≤—ñ—Ç –∑ Python –ø—Ä–æ–µ–∫—Ç—É!")

if __name__ == "__main__":
    main()
""")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–µ–∫—Ç
    initializer = ProjectInitializer(project_path)
    success = initializer.initialize()

    if success:
        print(f"‚úÖ Python –ø—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤: {project_path}")
        print("üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in sorted(project_path.rglob("*")):
            if file.is_file():
                print(f"   - {file.relative_to(project_path)}")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É")


def example_web_project():
    """–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–± –ø—Ä–æ–µ–∫—Ç—É"""
    print("\nüåê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–± –ø—Ä–æ–µ–∫—Ç—É...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    project_path = Path("/tmp/example_web_project")
    project_path.mkdir(exist_ok=True)

    # –°—Ç–≤–æ—Ä—é—î–º–æ HTML —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
    (project_path / "page.html").write_text("""<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <title>–ú—ñ–π —Å–∞–π—Ç</title>
</head>
<body>
    <h1>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!</h1>
</body>
</html>
""")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–µ–∫—Ç
    initializer = ProjectInitializer(project_path)
    success = initializer.initialize()

    if success:
        print(f"‚úÖ –í–µ–± –ø—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤: {project_path}")
        print("üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in sorted(project_path.rglob("*")):
            if file.is_file():
                print(f"   - {file.relative_to(project_path)}")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É")


def example_javascript_project():
    """–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JavaScript –ø—Ä–æ–µ–∫—Ç—É"""
    print("\n‚ö° –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JavaScript –ø—Ä–æ–µ–∫—Ç—É...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    project_path = Path("/tmp/example_js_project")
    project_path.mkdir(exist_ok=True)

    # –°—Ç–≤–æ—Ä—é—î–º–æ JS —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
    (project_path / "utils.js").write_text("""// –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

function greet(name) {
    console.log(`–ü—Ä–∏–≤—ñ—Ç, ${name}!`);
}

module.exports = { greet };
""")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–µ–∫—Ç
    initializer = ProjectInitializer(project_path)
    success = initializer.initialize()

    if success:
        print(f"‚úÖ JavaScript –ø—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤: {project_path}")
        print("üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in sorted(project_path.rglob("*")):
            if file.is_file():
                print(f"   - {file.relative_to(project_path)}")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É")


def show_project_content(project_path: Path, filename: str):
    """–ü–æ–∫–∞–∑—É—î –≤–º—ñ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
    file_path = project_path / filename
    if file_path.exists():
        print(f"\nüìÑ –í–º—ñ—Å—Ç {filename}:")
        print("=" * 40)
        print(
            file_path.read_text()[:300] + "..."
            if len(file_path.read_text()) > 300
            else file_path.read_text()
        )
        print("=" * 40)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è ProjectInitializer")
    print("=" * 50)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(level=logging.INFO)

    try:
        # –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø—Ä–æ–µ–∫—Ç—ñ–≤
        example_python_project()
        example_web_project()
        example_javascript_project()

        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–º—ñ—Å—Ç –¥–µ—è–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤
        print("\nüìñ –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É:")

        # Python –ø—Ä–æ–µ–∫—Ç
        python_path = Path("/tmp/example_python_project")
        if python_path.exists():
            show_project_content(python_path, "README.md")
            show_project_content(python_path, "requirements.txt")

        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –ü—ñ–¥–∫–∞–∑–∫–∏:")
        print("   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å ./setup.sh –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ")
        print("   - –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ DEV_PLAN.md –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–∫–∏")
        print("   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ GitHub Actions –¥–ª—è CI/CD")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
