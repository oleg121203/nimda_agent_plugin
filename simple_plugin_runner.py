#!/usr/bin/env python3
"""
üöÄ NIMDA Plugin System - –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫–∞—á
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤ –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π

–°—Ç–≤–æ—Ä–µ–Ω–æ: 15 –ª–∏–ø–Ω—è 2025
–í–µ—Ä—Å—ñ—è: 2.0.0 - Simple Runner
"""

import asyncio
import json
import sys
import time
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø–ª–∞–≥—ñ–Ω—ñ–≤
sys.path.append(str(Path(__file__).parent))

from plugins.dev_plan_executor_plugin import DevPlanExecutorPlugin


class SimpleNIMDARunner:
    """
    –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫–∞—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó NIMDA –ø–ª–∞–≥—ñ–Ω–∞
    """

    def __init__(self, workspace_path: str = "."):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è"""
        self.workspace_path = Path(workspace_path)
        self.plugin = None

        print("üöÄ NIMDA Plugin System - –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫–∞—á")
        print("=" * 50)

    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞
            print("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞...")
            self.plugin = DevPlanExecutorPlugin(
                {
                    "workspace_path": str(self.workspace_path),
                    "backup_enabled": True,
                    "max_parallel_tasks": 2,
                }
            )

            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            await self._demo_parsing()
            await self._demo_task_execution()
            await self._demo_performance()

            print("\nüéä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        except Exception as e:
            print(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")

    async def _demo_parsing(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN"""
        print("\nüìÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN...")

        try:
            task = {
                "type": "parse_dev_plan",
                "description": "–ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN.md –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó",
            }

            start_time = time.time()
            result = await self.plugin.execute(task)
            execution_time = time.time() - start_time

            if result.success:
                phases = result.data.get("phases", {})
                total_tasks = result.data.get("statistics", {}).get("total_tasks", 0)

                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞ {execution_time:.3f}—Å")
                print(f"   üìä –ó–Ω–∞–π–¥–µ–Ω–æ: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å")

                # –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–∑–∏
                for phase_name, phase_data in list(phases.items())[
                    :3
                ]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Ñ–∞–∑–∏
                    sections_count = len(phase_data.get("sections", {}))
                    print(
                        f"   üéØ {phase_name}: {phase_data['title']} ({sections_count} —Å–µ–∫—Ü—ñ–π)"
                    )

                if len(phases) > 3:
                    print(f"   ... —ñ —â–µ {len(phases) - 3} —Ñ–∞–∑")

            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {result.message}")

        except Exception as e:
            print(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")

    async def _demo_task_execution(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"""
        print("\n‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...")

        try:
            # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
            demo_tasks = [
                {
                    "name": "HyperGlassUI",
                    "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è - Ultra-realistic glassmorphism",
                    "completed": False,
                    "status": "pending",
                },
                {
                    "name": "NeuralNetworkEngine",
                    "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è AI –∑–∞–≤–¥–∞–Ω–Ω—è - Deep learning engine",
                    "completed": False,
                    "status": "pending",
                },
                {
                    "name": "AdvancedEncryption",
                    "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è - Military-grade encryption",
                    "completed": False,
                    "status": "pending",
                },
            ]

            print("üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...")

            execution_times = []

            for i, demo_task in enumerate(demo_tasks, 1):
                task = {
                    "type": "execute_task",
                    "task_data": demo_task,
                    "description": f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è {i}",
                }

                start_time = time.time()
                result = await self.plugin.execute(task)
                execution_time = time.time() - start_time
                execution_times.append(execution_time)

                status = "‚úÖ" if result.success else "‚ùå"
                print(f"   {status} {demo_task['name']}: {execution_time:.3f}—Å")

            avg_time = (
                sum(execution_times) / len(execution_times) if execution_times else 0
            )
            tasks_per_second = 1 / avg_time if avg_time > 0 else 0

            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
            print(f"   ‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –∑–∞–≤–¥–∞–Ω–Ω—è: {avg_time:.3f}—Å")
            print(f"   üöÄ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {tasks_per_second:.2f} –∑–∞–≤–¥–∞–Ω—å/—Å")

            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Ü—ñ–ª—å–æ–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é (2.5+ –∑–∞–¥–∞—á/—Å –∑ DEV_PLAN)
            target_performance = 2.5
            if tasks_per_second >= target_performance:
                print(f"   üéØ –¶–Ü–õ–¨ –î–û–°–Ø–ì–ù–£–¢–ê! (‚â•{target_performance} –∑–∞–≤–¥–∞–Ω—å/—Å)")
            else:
                ratio = (tasks_per_second / target_performance) * 100
                print(
                    f"   üìä –ü—Ä–æ–≥—Ä–µ—Å –¥–æ —Ü—ñ–ª—ñ: {ratio:.1f}% –≤—ñ–¥ {target_performance} –∑–∞–≤–¥–∞–Ω—å/—Å"
                )

        except Exception as e:
            print(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")

    async def _demo_performance(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")

        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.plugin.get_statistics()

            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–≥—ñ–Ω–∞:")
            print(f"   üë§ –ù–∞–∑–≤–∞: {stats['name']} v{stats['version']}")
            print(f"   üìà –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {stats['execution_count']}")
            print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {stats['success_count']}")
            print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['error_count']}")
            print(f"   üéØ –†—ñ–≤–µ–Ω—å —É—Å–ø—ñ—Ö—É: {stats['success_rate']}%")
            print(f"   ‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {stats['total_execution_time']}—Å")
            print(f"   üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {stats['average_execution_time']}—Å")

            # –¢–µ—Å—Ç –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...")

            task = {
                "type": "optimize_execution",
                "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            }

            result = await self.plugin.execute(task)

            if result.success:
                print(f"‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {result.message}")
                if result.data:
                    max_parallel = result.data.get("max_parallel_tasks", "N/A")
                    avg_time = result.data.get("average_task_time", "N/A")
                    print(f"   üîÑ –ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: {max_parallel}")
                    print(f"   ‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –∑–∞–≤–¥–∞–Ω–Ω—è: {avg_time}")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {result.message}")

        except Exception as e:
            print(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

    async def run_quick_test(self):
        """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        print("\nüß™ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")

        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            self.plugin = DevPlanExecutorPlugin(
                {"workspace_path": str(self.workspace_path)}
            )

            # –¢–µ—Å—Ç–∏
            tests = [
                ("parse_dev_plan", "–ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN"),
                ("get_progress", "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"),
                ("optimize_execution", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è"),
            ]

            passed = 0

            for test_type, test_name in tests:
                try:
                    task = {
                        "type": test_type,
                        "description": f"–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç: {test_name}",
                    }

                    result = await self.plugin.execute(task)

                    if result.success:
                        print(f"   ‚úÖ {test_name}")
                        passed += 1
                    else:
                        print(f"   ‚ùå {test_name}: {result.message}")

                except Exception as e:
                    print(f"   üí• {test_name}: {e}")

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {passed}/{len(tests)} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

            if passed == len(tests):
                print("üéä –í—Å—ñ –±–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å!")
            else:
                print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

        except Exception as e:
            print(f"üí• –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É: {e}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse

    parser = argparse.ArgumentParser(description="NIMDA Plugin Simple Runner")
    parser.add_argument(
        "--workspace", type=str, default=".", help="–®–ª—è—Ö –¥–æ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É"
    )
    parser.add_argument(
        "--mode",
        type=str,
        choices=["demo", "test"],
        default="demo",
        help="–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏: demo - –ø–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è, test - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç",
    )

    args = parser.parse_args()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DEV_PLAN.md
    dev_plan_path = Path(args.workspace) / "DEV_PLAN.md"
    if not dev_plan_path.exists():
        print(f"‚ö†Ô∏è –£–í–ê–ì–ê: DEV_PLAN.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {dev_plan_path}")
        print("   –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ")
        print()

    # –ó–∞–ø—É—Å–∫
    runner = SimpleNIMDARunner(args.workspace)

    try:
        if args.mode == "demo":
            await runner.run_demo()
        else:
            await runner.run_quick_test()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –†–æ–±–æ—Ç—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
