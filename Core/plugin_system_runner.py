#!/usr/bin/env python3
"""
üöÄ NIMDA Agent Plugin System Runner
–ì–æ–ª–æ–≤–Ω–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤ –¥–ª—è NIMDA Agent

–°—Ç–≤–æ—Ä–µ–Ω–æ: 15 –ª–∏–ø–Ω—è 2025
–í–µ—Ä—Å—ñ—è: 2.0.0 - Complete Plugin Integration
–§–æ–∫—É—Å: –ì–ª–∏–±–æ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN

–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ Core –º–æ–¥—É–ª—è –¥–ª—è –∫—Ä–∞—â–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É.
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Any, Dict

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

try:
    from plugins.dev_plan_executor_plugin import DevPlanExecutorPlugin
    from plugins.plugin_manager import PluginManager
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –ø–ª–∞–≥—ñ–Ω—ñ–≤: {e}")
    sys.exit(1)


class NIMDAPluginSystemRunner:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤ NIMDA Agent

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω—ñ–≤
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º
    - –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
    - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    - GUI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
    """

    def __init__(self, workspace_path: str = "."):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏"""
        self.workspace_path = Path(workspace_path)
        self.setup_logging()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞–≥—ñ–Ω—ñ–≤
        plugins_dir = project_root / "plugins"
        self.plugin_manager = PluginManager(plugins_dir=str(plugins_dir), max_workers=4)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger("NIMDAPluginSystem")

        # –ó–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —á–µ—Ä–µ–∑ API PluginManager
        self.logger.info("üöÄ NIMDA Plugin System Runner —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        log_dir = self.workspace_path / "logs"
        log_dir.mkdir(exist_ok=True)

        log_file = log_dir / "nimda_plugin_system.log"

        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            handlers=[logging.FileHandler(log_file), logging.StreamHandler()],
        )

    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤"""
        try:
            self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤...")

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ PluginManager (–±–µ–∑–ø–µ—á–Ω–æ)
            try:
                setattr(self.plugin_manager, "on_plugin_loaded", self._on_plugin_loaded)
                setattr(self.plugin_manager, "on_plugin_error", self._on_plugin_error)
                setattr(
                    self.plugin_manager, "on_task_completed", self._on_task_completed
                )
                self.logger.info("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            except Exception as e:
                self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∏–∫–ª–∏–∫–∏: {e}")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–ª–∞–≥—ñ–Ω–∏
            await self.plugin_manager.load_plugins()

            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–ª–∞–≥—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN
            dev_plan_plugin = DevPlanExecutorPlugin(
                {
                    "workspace_path": str(self.workspace_path),
                    "backup_enabled": True,
                    "max_parallel_tasks": 3,
                }
            )

            await self.plugin_manager.register_plugin(dev_plan_plugin)

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥—ñ–Ω—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            return False

    async def run_dev_plan_execution(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN"""
        try:
            self.logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN...")

            # 1. –ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN
            parse_task = {
                "type": "parse_dev_plan",
                "description": "–ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN.md —Ñ–∞–π–ª—É",
            }

            parse_result = await self.plugin_manager.execute_task(parse_task)

            if not parse_result.success:
                return {
                    "success": False,
                    "message": f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN: {parse_result.message}",
                    "results": [],
                }

            self.logger.info("‚úÖ DEV_PLAN —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–µ–Ω–æ")

            # 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–∑
            phases = {}
            if parse_result.data and hasattr(parse_result.data, "get"):
                phases = parse_result.data.get("phases", {})
            elif parse_result.data and isinstance(parse_result.data, dict):
                phases = parse_result.data.get("phases", {})
            execution_results = []

            # 3. –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑ –ø–æ —á–µ—Ä–∑—ñ
            for phase_name, phase_data in phases.items():
                self.logger.info(f"üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑–∏: {phase_name}")

                phase_task = {
                    "type": "execute_phase",
                    "phase_name": phase_name,
                    "description": f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑–∏ {phase_name}: {phase_data['title']}",
                }

                phase_result = await self.plugin_manager.execute_task(phase_task)
                execution_results.append(
                    {
                        "phase": phase_name,
                        "result": phase_result,
                        "title": phase_data["title"],
                    }
                )

                if phase_result.success:
                    self.logger.info(f"‚úÖ –§–∞–∑–∞ {phase_name} –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    self.logger.warning(
                        f"‚ö†Ô∏è –§–∞–∑–∞ {phase_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {phase_result.message}"
                    )

            # 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
            progress_task = {
                "type": "get_progress",
                "description": "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É",
            }

            progress_result = await self.plugin_manager.execute_task(progress_task)

            # 5. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤—ñ—Ç—É
            successful_phases = sum(
                1 for result in execution_results if result["result"].success
            )
            total_phases = len(execution_results)

            final_report = {
                "success": successful_phases == total_phases,
                "message": f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_phases}/{total_phases} —Ñ–∞–∑ —É—Å–ø—ñ—à–Ω–æ",
                "results": execution_results,
                "progress": progress_result.data if progress_result.success else None,
                "statistics": self.plugin_manager.get_system_statistics(),
            }

            self.logger.info(
                f"üéä –í–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_phases}/{total_phases} —Ñ–∞–∑ —É—Å–ø—ñ—à–Ω–æ"
            )

            return final_report

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN: {e}")
            return {
                "success": False,
                "message": f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}",
                "results": [],
            }

    async def run_optimized_execution(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é"""
        try:
            self.logger.info("‚ö° –ü–æ—á–∞—Ç–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è...")

            # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º
            optimize_task = {
                "type": "optimize_execution",
                "description": "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
            }

            optimize_result = await self.plugin_manager.execute_task(optimize_task)
            self.logger.info(f"üîß –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: {optimize_result.message}")

            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            return await self.run_dev_plan_execution()

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
            return {
                "success": False,
                "message": f"–ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}",
                "results": [],
            }

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏"""
        self.logger.info("üîª –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤...")
        await self.plugin_manager.shutdown()
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥—ñ–Ω—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _on_plugin_loaded(self, plugin):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞"""
        self.logger.info(f"üì¶ –ü–ª–∞–≥—ñ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {plugin.name} v{plugin.version}")

    def _on_plugin_error(self, plugin, task, error):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –ø–ª–∞–≥—ñ–Ω–∞"""
        plugin_name = plugin.name if plugin else "Unknown"
        self.logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–≥—ñ–Ω–∞ {plugin_name}: {error}")

    def _on_task_completed(self, plugin, task, result):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        status = "‚úÖ" if result.success else "‚ùå"
        self.logger.info(
            f"{status} –ó–∞–≤–¥–∞–Ω–Ω—è {task.get('type', 'unknown')} –ø–ª–∞–≥—ñ–Ω–æ–º {plugin.name}: {result.message}"
        )


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏"""
    import argparse

    parser = argparse.ArgumentParser(description="NIMDA Plugin System Runner")
    parser.add_argument(
        "--workspace",
        type=str,
        default=".",
        help="–®–ª—è—Ö –¥–æ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: –ø–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è)",
    )
    parser.add_argument(
        "--mode",
        type=str,
        choices=["standard", "optimized"],
        default="optimized",
        help="–†–µ–∂–∏–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: optimized)",
    )

    args = parser.parse_args()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    runner = NIMDAPluginSystemRunner(args.workspace)

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        if not await runner.initialize():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥—ñ–Ω—ñ–≤")
            sys.exit(1)

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è
        if args.mode == "optimized":
            result = await runner.run_optimized_execution()
        else:
            result = await runner.run_dev_plan_execution()

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print("\n" + "=" * 60)
        print("üéä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –í–ò–ö–û–ù–ê–ù–ù–Ø DEV_PLAN")
        print("=" * 60)
        print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–Ü–®–ù–û' if result['success'] else '‚ùå –ü–û–ú–ò–õ–ö–ò'}")
        print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {result['message']}")

        if result.get("progress"):
            progress = result["progress"]
            print(
                f"–ü—Ä–æ–≥—Ä–µ—Å: {progress['completed_tasks']}/{progress['total_tasks']} ({progress['progress']:.1%})"
            )

        if result.get("statistics"):
            stats = result["statistics"]
            print(
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_tasks_executed']} –∑–∞–≤–¥–∞–Ω—å, {stats['total_execution_time']:.2f}—Å"
            )

        print("=" * 60)

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        await runner.shutdown()

        sys.exit(0 if result["success"] else 1)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        await runner.shutdown()
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await runner.shutdown()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
