#!/usr/bin/env python3
"""
NIMDA Agent GUI - Main Application Launcher
Entry point for NIMDA Agent with GUI self-improvement capabilities
"""

import os
import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Check for PySide6 availability
try:
    from PySide6.QtCore import QTimer
    from PySide6.QtWidgets import QApplication, QMessageBox

    PYSIDE6_AVAILABLE = True
except ImportError:
    PYSIDE6_AVAILABLE = False
    print("‚ö†Ô∏è PySide6 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. GUI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é: pip install PySide6")


def check_dependencies():
    """Check and install required dependencies"""
    missing_deps = []

    # Check PySide6
    if not PYSIDE6_AVAILABLE:
        missing_deps.append("PySide6")

    # Check other GUI dependencies
    try:
        import sys

        if sys.platform == "darwin":  # macOS
            try:
                import objc
            except ImportError:
                missing_deps.append("PyObjC")
    except Exception:
        pass

    if missing_deps:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        for dep in missing_deps:
            print(f"   ‚Ä¢ {dep}")
        print("\nüí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        print("   pip install PySide6")
        if "PyObjC" in missing_deps:
            print("   pip install PyObjC")
        return False

    return True


def install_dependencies():
    """Attempt to install missing dependencies"""
    import subprocess

    dependencies = ["PySide6"]
    if sys.platform == "darwin":
        dependencies.append("PyObjC")

    print("üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

    for dep in dependencies:
        try:
            print(f"   –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {dep}...")
            result = subprocess.run(
                [sys.executable, "-m", "pip", "install", dep],
                capture_output=True,
                text=True,
            )

            if result.returncode == 0:
                print(f"   ‚úÖ {dep} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {dep}: {result.stderr}")
                return False

        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {dep}: {e}")
            return False

    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return True


def run_gui_application():
    """Run the GUI application"""
    if not PYSIDE6_AVAILABLE:
        print("GUI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å PySide6")
        return 1

    try:
        # Import GUI components
        from GUI.gui_controller import get_gui_controller
        from GUI.main_window import NIMDAMainWindow
        from GUI.theme import NIMDATheme

        # Create application
        app = QApplication(sys.argv)
        app.setApplicationName("NIMDA Agent")
        app.setApplicationVersion("1.0")
        app.setOrganizationName("NIMDA Project")

        # Set up controller
        controller = get_gui_controller()

        # Create and show main window
        window = NIMDAMainWindow()
        controller.set_main_window(window)

        # Apply theme
        theme = NIMDATheme()
        theme.apply_theme(app)

        window.show()

        print("üöÄ NIMDA Agent GUI –∑–∞–ø—É—â–µ–Ω–æ")
        print(
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
        )

        return app.exec()

    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: {e}")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ GUI —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return 1
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")
        return 1


def run_console_mode():
    """Run in console mode if GUI is not available"""
    print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ NIMDA Agent –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
    print("=" * 50)

    # Import core components
    try:
        from deep_system_analyzer import DeepSystemAnalyzer
        from dev_plan_manager import DevPlanManager

        project_path = Path(__file__).parent.parent

        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_path.name}")

        # Dev Plan status
        print("\nüìã –°—Ç–∞—Ç—É—Å Dev Plan:")
        try:
            dev_manager = DevPlanManager(project_path)
            status = dev_manager.get_plan_status()
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å: {status['progress_percentage']:.1f}%")
            print(
                f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {status['completed_subtasks']}/{status['total_subtasks']} –ø—ñ–¥–∑–∞–¥–∞—á"
            )
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

        # Quick analysis
        print("\nüîç –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑:")
        try:
            analyzer = DeepSystemAnalyzer(str(project_path))
            analysis = analyzer.analyze_full_system(pause_duration=0.1)

            structure = analysis.get("structure", {})
            print(f"   Python —Ñ–∞–π–ª—ñ–≤: {len(structure.get('python_files', []))}")
            print(f"   –ü—Ä–æ–±–ª–µ–º: {len(analysis.get('issues', []))}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {len(analysis.get('recommendations', []))}")

        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")

        # Console interface
        print("\nüí¨ –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
        print("–ö–æ–º–∞–Ω–¥–∏:")
        print("  expand  - –†–æ–∑—à–∏—Ä–∏—Ç–∏ dev plan")
        print("  analyze - –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑")
        print("  status  - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
        print("  gui     - –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ GUI")
        print("  exit    - –í–∏—Ö—ñ–¥")

        while True:
            try:
                command = input("\nNIMDA> ").strip().lower()

                if command in ["exit", "quit", "q"]:
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break

                elif command == "expand":
                    print("üìã –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è dev plan...")
                    try:
                        dev_manager = DevPlanManager(project_path)
                        result = dev_manager.update_and_expand_plan()
                        print("‚úÖ Dev plan —Ä–æ–∑—à–∏—Ä–µ–Ω–æ")
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

                elif command == "analyze":
                    print("üß† –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑...")
                    try:
                        analyzer = DeepSystemAnalyzer(str(project_path))
                        analyzer.analyze_full_system(pause_duration=0.5)
                        report_path = analyzer.save_report()
                        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–≤—ñ—Ç: {report_path}")
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

                elif command == "status":
                    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:")
                    python_files = list(project_path.glob("**/*.py"))
                    print(f"   Python —Ñ–∞–π–ª—ñ–≤: {len(python_files)}")
                    print(f"   GUI –¥–æ—Å—Ç—É–ø–Ω–∏–π: {'‚úÖ' if PYSIDE6_AVAILABLE else '‚ùå'}")
                    print(
                        f"   Dev Plan: {'‚úÖ' if (project_path / 'DEV_PLAN.md').exists() else '‚ùå'}"
                    )

                elif command == "gui":
                    if PYSIDE6_AVAILABLE:
                        print("üöÄ –ó–∞–ø—É—Å–∫ GUI...")
                        return run_gui_application()
                    else:
                        print("‚ùå GUI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å PySide6")

                else:
                    print("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É")

            except KeyboardInterrupt:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

        return 0

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É: {e}")
        return 1


def main():
    """Main application entry point"""
    print("ü§ñ NIMDA Agent - Intelligent Development Assistant")
    print("=" * 60)

    # Parse command line arguments
    import argparse

    parser = argparse.ArgumentParser(description="NIMDA Agent with GUI")
    parser.add_argument(
        "--mode",
        choices=["gui", "console", "auto"],
        default="auto",
        help="Application mode",
    )
    parser.add_argument(
        "--install-deps", action="store_true", help="Install missing dependencies"
    )

    args = parser.parse_args()

    # Install dependencies if requested
    if args.install_deps:
        if install_dependencies():
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GUI")
        return 0

    # Check dependencies
    if not check_dependencies() and args.mode in ["gui", "auto"]:
        print("\nüí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ --install-deps –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è")
        if args.mode == "auto":
            print("üîÑ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É...")
            return run_console_mode()
        else:
            return 1

    # Run appropriate mode
    if args.mode == "gui" or (args.mode == "auto" and PYSIDE6_AVAILABLE):
        return run_gui_application()
    else:
        return run_console_mode()


if __name__ == "__main__":
    sys.exit(main())
