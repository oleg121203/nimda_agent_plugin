"""
Git –º–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏–º —Ç–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º
"""

import os
import subprocess
import json
from typing import Dict, List, Any, Optional
from pathlib import Path
from datetime import datetime
import logging


class GitManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º

    –§—É–Ω–∫—Ü—ñ—ó:
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º
    - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ GitHub
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∫–æ–º—ñ—Ç–∏ —Ç–∞ –ø—É—à—ñ
    - –†–µ–∑–æ–ª—é—Ü—ñ—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—ñ–ª–∫–∞–º–∏
    """

    def __init__(self, project_path: Path):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Git –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        Args:
            project_path: –®–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
        """
        self.project_path = project_path
        self.logger = logging.getLogger('GitManager')

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.config = {
            "auto_commit": True,
            "auto_push": True,
            "auto_pull": True,
            "commit_message_prefix": "ü§ñ NIMDA:",
            "main_branch": "main",
            "backup_branch": "nimda-backup"
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Git
        self._ensure_git_initialized()

    def _ensure_git_initialized(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"""
        git_dir = self.project_path / ".git"

        if not git_dir.exists():
            self.logger.info("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...")
            self._run_git_command(["git", "init"])

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ–º—ñ—Ç—É
            self._create_gitignore()
            self._run_git_command(["git", "add", ".gitignore"])
            self._run_git_command(["git", "commit", "-m", "üöÄ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–º—ñ—Ç NIMDA Agent"])

    def _create_gitignore(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ .gitignore —Ñ–∞–π–ª—É"""
        gitignore_content = """# NIMDA Agent
nimda_logs/
nimda_agent_config.json
*.tmp
*.temp

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/
.venv

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Node modules (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è JavaScript)
node_modules/

# Backup files
*.bak
*.backup
"""

        gitignore_file = self.project_path / ".gitignore"

        if not gitignore_file.exists():
            try:
                with open(gitignore_file, 'w', encoding='utf-8') as f:
                    f.write(gitignore_content)
                self.logger.info(".gitignore —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è .gitignore: {e}")

    def _run_git_command(self, command: List[str], capture_output: bool = True) -> Optional[str]:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è Git –∫–æ–º–∞–Ω–¥–∏

        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            capture_output: –ß–∏ –∑–∞—Ö–æ–ø–ª—é–≤–∞—Ç–∏ –≤–∏–≤—ñ–¥

        Returns:
            –í–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        """
        try:
            result = subprocess.run(
                command,
                cwd=self.project_path,
                capture_output=capture_output,
                text=True,
                check=True
            )

            if capture_output:
                return result.stdout.strip()

            return "Success"

        except subprocess.CalledProcessError as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ {' '.join(command)}: {e}")
            if capture_output and e.stdout:
                self.logger.error(f"STDOUT: {e.stdout}")
            if capture_output and e.stderr:
                self.logger.error(f"STDERR: {e.stderr}")
            return None
        except Exception as e:
            self.logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Git –∫–æ–º–∞–Ω–¥–∏: {e}")
            return None

    def get_status(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

        Returns:
            –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
            git_dir = self.project_path / ".git"
            if not git_dir.exists():
                return {
                    "initialized": False,
                    "message": "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
                }

            # –ü–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞
            current_branch = self._run_git_command(["git", "branch", "--show-current"])

            # –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤
            status_output = self._run_git_command(["git", "status", "--porcelain"])

            # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç—É—Å—É
            has_changes = bool(status_output)
            staged_files = []
            unstaged_files = []
            untracked_files = []

            if status_output:
                for line in status_output.split('\n'):
                    if line:
                        status_code = line[:2]
                        file_path = line[3:]

                        if status_code[0] != ' ' and status_code[0] != '?':
                            staged_files.append(file_path)

                        if status_code[1] != ' ':
                            if status_code[0] == '?':
                                untracked_files.append(file_path)
                            else:
                                unstaged_files.append(file_path)

            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
            remote_url = self._run_git_command(["git", "config", "--get", "remote.origin.url"])

            # –û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–º—ñ—Ç
            last_commit = self._run_git_command(["git", "log", "-1", "--oneline"])

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ç—ñ–≤ –ø–æ–ø–µ—Ä–µ–¥—É/–ø–æ–∑–∞–¥—É
            behind_ahead = self._get_behind_ahead_count()

            return {
                "initialized": True,
                "current_branch": current_branch,
                "has_changes": has_changes,
                "staged_files": staged_files,
                "unstaged_files": unstaged_files,
                "untracked_files": untracked_files,
                "remote_url": remote_url,
                "last_commit": last_commit,
                "behind_count": behind_ahead.get("behind", 0),
                "ahead_count": behind_ahead.get("ahead", 0),
                "total_files": len(staged_files) + len(unstaged_files) + len(untracked_files)
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É Git: {e}")
            return {
                "initialized": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
            }

    def _get_behind_ahead_count(self) -> Dict[str, int]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º—ñ—Ç—ñ–≤ –ø–æ–∑–∞–¥—É/–ø–æ–ø–µ—Ä–µ–¥—É –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó –≥—ñ–ª–∫–∏"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É fetch —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            self._run_git_command(["git", "fetch"], capture_output=False)

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ç—ñ–≤
            output = self._run_git_command(["git", "rev-list", "--left-right", "--count", "HEAD...@{u}"])

            if output:
                parts = output.split('\t')
                if len(parts) == 2:
                    return {
                        "ahead": int(parts[0]),
                        "behind": int(parts[1])
                    }

            return {"ahead": 0, "behind": 0}

        except Exception:
            return {"ahead": 0, "behind": 0}

    def has_changes(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏

        Returns:
            True —è–∫—â–æ —î –∑–º—ñ–Ω–∏
        """
        status = self.get_status()
        return status.get("has_changes", False)

    def commit_changes(self, message: str, add_all: bool = True) -> Dict[str, Any]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É –∑—ñ –∑–º—ñ–Ω–∞–º–∏

        Args:
            message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É
            add_all: –ß–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É
        """
        try:
            if not self.has_changes():
                return {
                    "success": True,
                    "message": "–ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É",
                    "commit_hash": None
                }

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
            if add_all:
                self._run_git_command(["git", "add", "."])

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É
            full_message = f"{self.config['commit_message_prefix']} {message}"
            result = self._run_git_command(["git", "commit", "-m", full_message])

            if result is None:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É"
                }

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–µ—à—É –∫–æ–º—ñ—Ç—É
            commit_hash = self._run_git_command(["git", "rev-parse", "HEAD"])

            if commit_hash:
                self.logger.info(f"–ö–æ–º—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {commit_hash[:8]} - {full_message}")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π push —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
                push_result = None
                if self.config["auto_push"]:
                    push_result = self.push_changes()

                return {
                    "success": True,
                    "message": f"–ö–æ–º—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {commit_hash[:8]}",
                    "commit_hash": commit_hash,
                    "commit_message": full_message,
                    "push_result": push_result
                }
            else:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–µ—à—É –∫–æ–º—ñ—Ç—É"
                }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É"
            }

    def push_changes(self, branch: Optional[str] = None) -> Dict[str, Any]:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

        Args:
            branch: –ì—ñ–ª–∫–∞ –¥–ª—è push. –Ø–∫—â–æ None - –ø–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        try:
            if not branch:
                branch = self._run_git_command(["git", "branch", "--show-current"])

            if not branch:
                return {
                    "success": False,
                    "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥—ñ–ª–∫—É"
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
            remote_url = self._run_git_command(["git", "config", "--get", "remote.origin.url"])
            if not remote_url:
                return {
                    "success": False,
                    "message": "–í—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
                }

            # Push –∑–º—ñ–Ω
            result = self._run_git_command(["git", "push", "origin", branch])

            if result is None:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–º—ñ–Ω"
                }

            self.logger.info(f"–ó–º—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é: {branch}")

            return {
                "success": True,
                "message": f"–ó–º—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –≥—ñ–ª–∫–∏ {branch}",
                "branch": branch,
                "remote_url": remote_url
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–º—ñ–Ω: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–º—ñ–Ω –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
            }

    def pull_changes(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
            remote_url = self._run_git_command(["git", "config", "--get", "remote.origin.url"])
            if not remote_url:
                return {
                    "success": False,
                    "message": "–í—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
                }

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω –ø–µ—Ä–µ–¥ pull
            if self.has_changes():
                stash_result = self._run_git_command(["git", "stash", "push", "-m", "NIMDA auto-stash before pull"])
                if stash_result is None:
                    return {
                        "success": False,
                        "message": "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω"
                    }

            # Pull –∑–º—ñ–Ω
            result = self._run_git_command(["git", "pull", "origin"])

            if result is None:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω"
                }

            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω —è–∫—â–æ –±—É–ª–∏
            if "NIMDA auto-stash before pull" in str(result):
                stash_pop_result = self._run_git_command(["git", "stash", "pop"])
                if stash_pop_result is None:
                    self.logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –ø—ñ—Å–ª—è pull")

            self.logger.info("–ó–º—ñ–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é")

            return {
                "success": True,
                "message": "–ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ",
                "pull_output": result,
                "remote_url": remote_url
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
            }

    def setup_github_remote(self, github_url: str) -> Dict[str, Any]:
        """
        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

        Args:
            github_url: URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ remote
            existing_remote = self._run_git_command(["git", "config", "--get", "remote.origin.url"])

            if existing_remote:
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ remote
                result = self._run_git_command(["git", "remote", "set-url", "origin", github_url])
            else:
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ remote
                result = self._run_git_command(["git", "remote", "add", "origin", github_url])

            if result is None:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            test_result = self._run_git_command(["git", "ls-remote", "origin"])

            if test_result is None:
                return {
                    "success": False,
                    "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
                }

            self.logger.info(f"–í—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {github_url}")

            return {
                "success": True,
                "message": f"GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {github_url}",
                "remote_url": github_url,
                "action": "updated" if existing_remote else "added"
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
            }

    def create_backup_branch(self) -> Dict[str, Any]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –≥—ñ–ª–∫–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –≥—ñ–ª–∫–∏
        """
        try:
            backup_branch_name = f"{self.config['backup_branch']}-{datetime.now().strftime('%Y%m%d-%H%M%S')}"

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—ñ–ª–∫–∏
            result = self._run_git_command(["git", "checkout", "-b", backup_branch_name])

            if result is None:
                return {
                    "success": False,
                    "message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –≥—ñ–ª–∫–∏"
                }

            # –ö–æ–º—ñ—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            if self.has_changes():
                commit_result = self.commit_changes("–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏")
                if not commit_result["success"]:
                    return {
                        "success": False,
                        "message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É"
                    }

            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó –≥—ñ–ª–∫–∏
            main_branch_result = self._run_git_command(["git", "checkout", self.config["main_branch"]])

            if main_branch_result is None:
                self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—ñ–ª–∫–∏ {self.config['main_branch']}")

            self.logger.info(f"–†–µ–∑–µ—Ä–≤–Ω—É –≥—ñ–ª–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_branch_name}")

            return {
                "success": True,
                "message": f"–†–µ–∑–µ—Ä–≤–Ω—É –≥—ñ–ª–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_branch_name}",
                "backup_branch": backup_branch_name,
                "current_branch": self.config["main_branch"]
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –≥—ñ–ª–∫–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –≥—ñ–ª–∫–∏"
            }

    def sync_with_remote(self) -> Dict[str, Any]:
        """
        –ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        """
        try:
            self.logger.info("–ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º")

            results = []

            # 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
            if self.config["auto_pull"]:
                pull_result = self.pull_changes()
                results.append(("pull", pull_result))

            # 2. –ö–æ–º—ñ—Ç –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω
            if self.has_changes() and self.config["auto_commit"]:
                commit_result = self.commit_changes("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω")
                results.append(("commit", commit_result))

            # 3. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω
            if self.config["auto_push"]:
                push_result = self.push_changes()
                results.append(("push", push_result))

            # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            all_successful = all(result[1]["success"] for result in results)

            return {
                "success": all_successful,
                "message": "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if all_successful else "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏",
                "operations": results,
                "timestamp": datetime.now().isoformat()
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"
            }
