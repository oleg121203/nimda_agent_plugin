#!/usr/bin/env python3
"""
–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤ VS –∫–æ–º–∞–Ω–¥–∏ codex
"""

import sys
import time

sys.path.append("/Users/dev/Documents/nimda_agent_plugin")

import subprocess
from pathlib import Path

from dev_plan_manager import DevPlanManager


def test_direct_methods():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤"""
    print("üîß –¢–ï–°–¢ 1: –ü—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—ñ–≤")
    print("-" * 40)

    project_path = Path("/Users/dev/Documents/nimda_agent_plugin")
    manager = DevPlanManager(project_path)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ –ø—Ä—è–º–æ
    manager._create_chat_agent()
    manager._create_worker_agent()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    chat_exists = Path("chat_agent.py").exists()
    worker_exists = Path("worker_agent.py").exists()

    print(f"   chat_agent.py —Å—Ç–≤–æ—Ä–µ–Ω–æ: {'‚úÖ' if chat_exists else '‚ùå'}")
    print(f"   worker_agent.py —Å—Ç–≤–æ—Ä–µ–Ω–æ: {'‚úÖ' if worker_exists else '‚ùå'}")

    return chat_exists and worker_exists


def test_codex_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∏ codex"""
    print("\nü§ñ –¢–ï–°–¢ 2: –ö–æ–º–∞–Ω–¥–∞ codex run full dev")
    print("-" * 40)

    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    if Path("chat_agent.py").exists():
        Path("chat_agent.py").unlink()
    if Path("worker_agent.py").exists():
        Path("worker_agent.py").unlink()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ
    print("   –§–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É codex
    result = subprocess.run(
        ["python", "main.py", "codex", "run", "full", "dev"],
        capture_output=True,
        text=True,
    )

    print(f"   –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑ –∫–æ–¥–æ–º: {result.returncode}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    chat_exists = Path("chat_agent.py").exists()
    worker_exists = Path("worker_agent.py").exists()

    print(f"   chat_agent.py —Å—Ç–≤–æ—Ä–µ–Ω–æ: {'‚úÖ' if chat_exists else '‚ùå'}")
    print(f"   worker_agent.py —Å—Ç–≤–æ—Ä–µ–Ω–æ: {'‚úÖ' if worker_exists else '‚ùå'}")

    return chat_exists and worker_exists


def main():
    print("üß™ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ú–ï–¢–û–î–Ü–í –°–¢–í–û–†–ï–ù–ù–Ø –§–ê–ô–õ–Ü–í")
    print("=" * 50)

    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É
    for filename in [
        "chat_agent.py",
        "worker_agent.py",
        "adaptive_thinker.py",
        "learning_module.py",
        "macos_integration.py",
    ]:
        if Path(filename).exists():
            Path(filename).unlink()

    # –¢–µ—Å—Ç 1: –ü—Ä—è–º—ñ –º–µ—Ç–æ–¥–∏
    direct_success = test_direct_methods()

    # –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ codex
    codex_success = test_codex_command()

    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
    print(f"   –ü—Ä—è–º—ñ –º–µ—Ç–æ–¥–∏: {'‚úÖ –ü–†–ê–¶–Æ–Æ–¢–¨' if direct_success else '‚ùå –ù–ï –ü–†–ê–¶–Æ–Æ–¢–¨'}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞ codex: {'‚úÖ –ü–†–ê–¶–Æ–Ñ' if codex_success else '‚ùå –ù–ï –ü–†–ê–¶–Æ–Ñ'}")

    if direct_success and not codex_success:
        print("\n‚ö†Ô∏è  –í–ò–°–ù–û–í–û–ö: –ö–æ–º–∞–Ω–¥–∞ codex –ù–ï –≤–∏–∫–ª–∏–∫–∞—î —Ä–µ–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è!")
        print(
            "   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –≤ command_processor.py –∞–±–æ dev_plan_manager.py"
        )
    elif direct_success and codex_success:
        print("\n‚úÖ –í–ò–°–ù–û–í–û–ö: –û–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –ø—Ä–∞—Ü—é—é—Ç—å!")
    else:
        print("\n‚ùå –í–ò–°–ù–û–í–û–ö: –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–±–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏!")


if __name__ == "__main__":
    main()
