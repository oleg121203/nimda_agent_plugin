#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É
"""

import sys
import tempfile
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
CURRENT_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(CURRENT_DIR))
from project_initializer_clean import ProjectInitializer


def test_generic_project():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É"""
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "generic_test"
        test_path.mkdir()

        initializer = ProjectInitializer(test_path)
        result = initializer.initialize()

        assert result
        assert (test_path / "README.md").exists()
        assert (test_path / ".gitignore").exists()
        assert (test_path / "DEV_PLAN.md").exists()
        assert (test_path / "CHANGELOG.md").exists()
        assert (test_path / "docs").exists()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∏—á–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: OK")


def test_python_project():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Python –ø—Ä–æ–µ–∫—Ç—É"""
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "python_test"
        test_path.mkdir()

        # –°—Ç–≤–æ—Ä—é—î–º–æ Python —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
        (test_path / "app.py").write_text("print('hello')")

        initializer = ProjectInitializer(test_path)
        result = initializer.initialize()

        assert result
        assert (test_path / "requirements.txt").exists()
        assert (test_path / "main.py").exists()
        assert (test_path / "src").exists()
        assert (test_path / "tests").exists()
        assert (test_path / "src" / "__init__.py").exists()
        assert (test_path / "tests" / "__init__.py").exists()
        print("‚úÖ Python –ø—Ä–æ–µ–∫—Ç: OK")


def test_web_project():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–± –ø—Ä–æ–µ–∫—Ç—É"""
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "web_test"
        test_path.mkdir()

        # –°—Ç–≤–æ—Ä—é—î–º–æ HTML —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
        (test_path / "page.html").write_text("<h1>Test</h1>")

        initializer = ProjectInitializer(test_path)
        result = initializer.initialize()

        assert result
        assert (test_path / "index.html").exists()
        assert (test_path / "style.css").exists()
        assert (test_path / "script.js").exists()
        assert (test_path / "css").exists()
        assert (test_path / "js").exists()
        assert (test_path / "images").exists()
        print("‚úÖ –í–µ–± –ø—Ä–æ–µ–∫—Ç: OK")


def test_javascript_project():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JavaScript –ø—Ä–æ–µ–∫—Ç—É"""
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "js_test"
        test_path.mkdir()

        # –°—Ç–≤–æ—Ä—é—î–º–æ JS —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
        (test_path / "app.js").write_text("console.log('hello')")

        initializer = ProjectInitializer(test_path)
        result = initializer.initialize()

        assert result
        assert (test_path / "package.json").exists()
        assert (test_path / "index.js").exists()
        print("‚úÖ JavaScript –ø—Ä–æ–µ–∫—Ç: OK")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è project_initializer_clean.py")
    print("=" * 50)

    try:
        test_generic_project()
        test_python_project()
        test_web_project()
        test_javascript_project()

        print("=" * 50)
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
