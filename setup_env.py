#!/usr/bin/env python3
"""
–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ NIMDA Agent
"""

import os
from pathlib import Path


def setup_environment():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    
    print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ NIMDA Agent")
    print("=" * 50)
    
    env_file = Path(".env")
    env_vars = {}
    
    # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
    print("\nüìã –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
    
    git_name = input("Git —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (GIT_USER_NAME): ").strip()
    if git_name:
        env_vars["GIT_USER_NAME"] = git_name
    
    git_email = input("Git email (GIT_USER_EMAIL): ").strip()
    if git_email:
        env_vars["GIT_USER_EMAIL"] = git_email
    
    # GitHub –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    print("\nüîó GitHub –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):")
    
    github_token = input("GitHub —Ç–æ–∫–µ–Ω (GITHUB_TOKEN): ").strip()
    if github_token:
        env_vars["GITHUB_TOKEN"] = github_token
    
    github_username = input("GitHub username (GITHUB_USERNAME): ").strip()
    if github_username:
        env_vars["GITHUB_USERNAME"] = github_username
    
    github_repo = input("GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π URL (GITHUB_REPO_URL): ").strip()
    if github_repo:
        env_vars["GITHUB_REPO_URL"] = github_repo
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    print("\n‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):")
    
    project_name = input("–ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É (PROJECT_NAME) [NIMDA-CLI]: ").strip()
    env_vars["PROJECT_NAME"] = project_name or "NIMDA-CLI"
    
    auto_commit = input("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∫–æ–º—ñ—Ç–∏ (AUTO_COMMIT) [true/false]: ").strip().lower()
    env_vars["AUTO_COMMIT"] = auto_commit if auto_commit in ["true", "false"] else "true"
    
    auto_push = input("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π push (AUTO_PUSH) [true/false]: ").strip().lower()
    env_vars["AUTO_PUSH"] = auto_push if auto_push in ["true", "false"] else "true"
    
    # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª
    if env_vars:
        with open(env_file, "w") as f:
            f.write("# NIMDA Agent Environment Variables\n")
            f.write("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ\n\n")
            
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        
        print(f"\n‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {env_file}")
        print("üöÄ –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ NIMDA Agent!")
    else:
        print("\n‚ö†Ô∏è –ù–µ –≤–≤–µ–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó")


def show_current_env():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    
    env_file = Path(".env")
    
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print("üìã –ü–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
    print("=" * 40)
    
    with open(env_file) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith("#"):
                print(f"  {line}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    
    import argparse
    
    parser = argparse.ArgumentParser(description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ NIMDA Agent")
    parser.add_argument("--setup", action="store_true", help="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    parser.add_argument("--show", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ")
    
    args = parser.parse_args()
    
    if args.setup:
        setup_environment()
    elif args.show:
        show_current_env()
    else:
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        print("ü§ñ NIMDA Agent - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("1. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ")
        print("0. –í–∏—Ö—ñ–¥")
        
        choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ").strip()
        
        if choice == "1":
            setup_environment()
        elif choice == "2":
            show_current_env()
        else:
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")


if __name__ == "__main__":
    main()
