"""
–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å NIMDA Agent - –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç —Ä–æ–∑—Ä–æ–±–∫–∏
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

from dev_plan_manager import DevPlanManager
from git_manager import GitManager
from command_processor import CommandProcessor
from project_initializer import ProjectInitializer
from changelog_manager import ChangelogManager


class NIMDAAgent:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç —Ä–æ–∑—Ä–æ–±–∫–∏ NIMDA

    –§—É–Ω–∫—Ü—ñ—ó:
    - –ß–∏—Ç–∞—î —Ç–∞ –≤–∏–∫–æ–Ω—É—î DEV_PLAN.md
    - –£–ø—Ä–∞–≤–ª—è—î Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º (–ª–æ–∫–∞–ª—å–Ω–∏–º —Ç–∞ GitHub)
    - –í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    - –°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É
    - –í–µ–¥–µ –∂—É—Ä–Ω–∞–ª –∑–º—ñ–Ω —É CHANGELOG.md
    """

    def __init__(self, project_path: Optional[str] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞

        Args:
            project_path: –®–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É. –Ø–∫—â–æ None - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
        """
        self.project_path = Path(project_path) if project_path else Path.cwd()
        self.config_file = self.project_path / "nimda_agent_config.json"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        env_file = self.project_path / ".env"
        if env_file.exists():
            load_dotenv(env_file)
        else:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø–ª–∞–≥—ñ–Ω–∞
            plugin_env = Path(__file__).parent / ".env"
            if plugin_env.exists():
                load_dotenv(plugin_env)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        self._setup_logging()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        self.dev_plan_manager = DevPlanManager(
            self.project_path, max_retries=self.config.get("max_retries", 3)
        )
        self.git_manager = GitManager(self.project_path)
        self.command_processor = CommandProcessor(self)
        self.project_initializer = ProjectInitializer(self.project_path)
        self.changelog_manager = ChangelogManager(self.project_path)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.config = self._load_config()

        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        self.is_running = False
        self.current_task = None
        self.execution_log = []

        self.logger.info(f"NIMDA Agent —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É: {self.project_path}")

    def _setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        log_dir = self.project_path / "nimda_logs"
        log_dir.mkdir(exist_ok=True)

        log_file = log_dir / f"nimda_agent_{datetime.now().strftime('%Y%m%d')}.log"

        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )

        self.logger = logging.getLogger('NIMDAAgent')

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞"""
        default_config = {
            "version": "1.0.0",
            "auto_commit": os.getenv("AUTO_COMMIT", "true").lower() == "true",
            "auto_push": os.getenv("AUTO_PUSH", "true").lower() == "true", 
            "create_backups": os.getenv("CREATE_BACKUPS", "true").lower() == "true",
            "max_retries": int(os.getenv("MAX_RETRIES", "3")),
            "github_integration": True,
            "codex_integration": True,
            "languages": [],
            "frameworks": [],
            "last_execution": None,
            "github_token": os.getenv("GITHUB_TOKEN"),
            "github_username": os.getenv("GITHUB_USERNAME"),
            "github_repo_url": os.getenv("GITHUB_REPO_URL"),
            "git_user_name": os.getenv("GIT_USER_NAME"),
            "git_user_email": os.getenv("GIT_USER_EMAIL"),
            "project_name": os.getenv("PROJECT_NAME", "NIMDA-CLI"),
            "enable_debug": os.getenv("ENABLE_DEBUG", "false").lower() == "true"
        }

        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ default –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                    for key, value in default_config.items():
                        config.setdefault(key, value)
                    return config
            except Exception as e:
                self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

        return default_config

    def _save_config(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

    def initialize_project(self) -> bool:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏

        Returns:
            bool: True —è–∫—â–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞
        """
        try:
            self.logger.info("–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É...")

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
            success = self.project_initializer.initialize()

            if success:
                self.logger.info("–ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                self.changelog_manager.add_entry("üöÄ –ü—Ä–æ–µ–∫—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ NIMDA Agent")
                return True
            else:
                self.logger.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É")
                return False

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            return False

    def process_command(self, command: str) -> Dict[str, Any]:
        """
        –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Codex

        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        self.logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command}")

        try:
            result = self.command_processor.process(command)

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.execution_log.append({
                "timestamp": datetime.now().isoformat(),
                "command": command,
                "result": result,
                "success": result.get("success", False)
            })

            return result

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏"
            }

    def execute_dev_plan(self, task_number: Optional[int] = None) -> Dict[str, Any]:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN.md –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ

        Args:
            task_number: –ù–æ–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ. –Ø–∫—â–æ None - –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤–µ—Å—å –ø–ª–∞–Ω

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        try:
            self.is_running = True

            if task_number:
                self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ #{task_number} –∑ DEV_PLAN.md")
                result = self.dev_plan_manager.execute_task(task_number)
            else:
                self.logger.info("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ DEV_PLAN.md")
                result = self.dev_plan_manager.execute_full_plan()

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            if result.get("success"):
                completed_tasks = result.get("completed_tasks", [])
                for task in completed_tasks:
                    self.changelog_manager.mark_task_completed(task)

            self.is_running = False
            return result

        except Exception as e:
            self.is_running = False
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É —Ä–æ–∑—Ä–æ–±–∫–∏"
            }

    def update_dev_plan(self) -> Dict[str, Any]:
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è DEV_PLAN.md

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        """
        try:
            self.logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è DEV_PLAN.md")

            result = self.dev_plan_manager.update_and_expand_plan()

            if result.get("success"):
                self.changelog_manager.add_entry("üìã DEV_PLAN.md –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ")

            return result

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DEV_PLAN: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É —Ä–æ–∑—Ä–æ–±–∫–∏"
            }

    def auto_fix_errors(self) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç—ñ

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        """
        try:
            self.logger.info("–ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤ –∫–æ–¥—ñ
            errors = self._detect_errors()

            if not errors:
                return {
                    "success": True,
                    "message": "–ü–æ–º–∏–ª–æ–∫ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ",
                    "fixed_count": 0
                }

            fixed_count = 0
            for error in errors:
                if self._fix_error(error):
                    fixed_count += 1

            # –§—ñ–∫—Å–∞—Ü—ñ—è –∑–º—ñ–Ω
            if fixed_count > 0:
                self.git_manager.commit_changes(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø–æ–º–∏–ª–æ–∫")
                self.changelog_manager.add_entry(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø–æ–º–∏–ª–æ–∫")

            return {
                "success": True,
                "message": f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∑ {len(errors)} –ø–æ–º–∏–ª–æ–∫",
                "fixed_count": fixed_count,
                "total_errors": len(errors)
            }

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
            }

    def _detect_errors(self) -> List[Dict[str, Any]]:
        """–í–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç—ñ"""
        errors = []

        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
        # –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞

        return errors

    def _fix_error(self, error: Dict[str, Any]) -> bool:
        """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
        # –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞
        return True

    def get_status(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –∞–≥–µ–Ω—Ç–∞

        Returns:
            Dict –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∞–≥–µ–Ω—Ç–∞
        """
        dev_plan_status = self.dev_plan_manager.get_plan_status()
        git_status = self.git_manager.get_status()

        return {
            "agent_running": self.is_running,
            "current_task": self.current_task,
            "project_path": str(self.project_path),
            "dev_plan": dev_plan_status,
            "git": git_status,
            "last_execution": self.config.get("last_execution"),
            "execution_log_size": len(self.execution_log)
        }

    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ NIMDA Agent")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.config["last_execution"] = datetime.now().isoformat()
        self._save_config()

        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º—ñ—Ç —è–∫—â–æ —î –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏
        if self.git_manager.has_changes():
            self.git_manager.commit_changes("üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ NIMDA Agent")

        self.is_running = False

    def get_env_var(self, key: str, default: Any = None) -> str:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

        Args:
            key: –ù–∞–∑–≤–∞ –∑–º—ñ–Ω–Ω–æ—ó
            default: –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

        Returns:
            –ó–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        """
        return os.getenv(key, default)

    def is_env_configured(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

        Returns:
            True —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
        """
        required_vars = ["GIT_USER_NAME", "GIT_USER_EMAIL"]
        return all(os.getenv(var) for var in required_vars)
