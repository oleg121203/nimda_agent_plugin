#!/usr/bin/env python3
"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≤–æ—Ä–∫—Ñ–ª–æ—É —Ä–æ–∑—Ä–æ–±–∫–∏ NIMDA –∑ –ø–æ—à–∞–≥–æ–≤–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫
"""

import importlib
import subprocess
import sys
import time
import traceback
from pathlib import Path
from typing import Dict, List, Tuple

sys.path.append("/Users/dev/Documents/nimda_agent_plugin")

from dev_plan_manager import DevPlanManager


class InteractiveDevWorkflow:
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN.md –∑ —Ä–µ–∞–ª—å–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–æ–º–∏–ª–æ–∫
    """

    def __init__(self, project_path: str = "/Users/dev/Documents/nimda_agent_plugin"):
        self.project_path = Path(project_path)
        self.manager = DevPlanManager(self.project_path)
        self.created_files = []
        self.created_dirs = []
        self.errors_found = []
        self.step_count = 0

    def log_step(self, message: str, level: str = "INFO"):
        """–õ–æ–≥ –∑ –Ω–æ–º–µ—Ä–æ–º –∫—Ä–æ–∫—É"""
        self.step_count += 1
        timestamp = time.strftime("%H:%M:%S")
        level_emoji = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "ERROR": "‚ùå",
            "WARNING": "‚ö†Ô∏è",
            "PROCESS": "üîÑ",
        }
        print(
            f"{level_emoji.get(level, '‚ÑπÔ∏è')} [{timestamp}] –ö—Ä–æ–∫ {self.step_count}: {message}"
        )

    def wait_for_user(self, message: str = "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."):
        """–ü–∞—É–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
        input(f"\n‚è∏Ô∏è  {message}")

    def read_dev_plan(self) -> Dict:
        """–ß–∏—Ç–∞—î —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å DEV_PLAN.md"""
        self.log_step("–ß–∏—Ç–∞–Ω–Ω—è DEV_PLAN.md")

        plan_file = self.project_path / "DEV_PLAN.md"
        if not plan_file.exists():
            self.log_step(f"DEV_PLAN.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é {plan_file}", "ERROR")
            return {}

        with open(plan_file, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–±–æ–∫—Å—ñ–≤
        tasks = []
        lines = content.split("\n")

        for line in lines:
            if "[ ]" in line or "[x]" in line:
                checked = "[x]" in line
                task_name = (
                    line.strip().replace("- [ ]", "").replace("- [x]", "").strip()
                )
                tasks.append({"name": task_name, "checked": checked, "line": line})

        self.log_step(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–≤–¥–∞–Ω—å —É DEV_PLAN.md", "SUCCESS")
        return {"tasks": tasks, "content": content}

    def build_directory_structure(self):
        """–ë—É–¥—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥—ñ–≤"""
        self.log_step("–ü–æ–±—É–¥–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤")

        directories = [
            "Core",
            "Agents",
            "GUI",
            "Services",
            "Utils",
            "Config",
            "tests/unit",
            "tests/integration",
            "docs/api",
            "docs/user",
            "data/temp",
            "data/cache",
            "logs",
            "resources/icons",
            "resources/themes",
        ]

        for dir_name in directories:
            dir_path = self.project_path / dir_name
            if not dir_path.exists():
                try:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    self.created_dirs.append(str(dir_path))
                    self.log_step(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥: {dir_name}", "SUCCESS")
                except Exception as e:
                    self.log_step(
                        f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É {dir_name}: {e}", "ERROR"
                    )
                    self.errors_found.append(
                        f"Directory creation error: {dir_name} - {e}"
                    )
            else:
                self.log_step(f"–ö–∞—Ç–∞–ª–æ–≥ {dir_name} –≤–∂–µ —ñ—Å–Ω—É—î")

        time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É

    def create_files(self):
        """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        self.log_step("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –º–µ—Ç–æ–¥–∞–º–∏ dev_plan_manager
        file_methods = {
            "chat_agent.py": "_create_chat_agent",
            "worker_agent.py": "_create_worker_agent",
            "adaptive_thinker.py": "_create_adaptive_thinker",
            "learning_module.py": "_create_learning_module",
            "macos_integration.py": "_create_macos_integration",
        }

        for filename, method_name in file_methods.items():
            self.log_step(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {filename}")

            try:
                if hasattr(self.manager, method_name):
                    method = getattr(self.manager, method_name)
                    method()  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É

                    file_path = self.project_path / filename
                    if file_path.exists():
                        self.created_files.append(str(file_path))
                        self.log_step(f"–§–∞–π–ª {filename} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ", "SUCCESS")
                    else:
                        self.log_step(f"–§–∞–π–ª {filename} –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ", "ERROR")
                        self.errors_found.append(f"File creation failed: {filename}")
                else:
                    self.log_step(f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "ERROR")
                    self.errors_found.append(f"Method not found: {method_name}")

            except Exception as e:
                self.log_step(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {filename}: {e}", "ERROR")
                self.errors_found.append(f"File creation error: {filename} - {e}")

            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ñ–∞–π–ª–∞–º–∏

    def check_syntax_errors(self) -> List[str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —É Python —Ñ–∞–π–ª–∞—Ö"""
        self.log_step("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫")

        syntax_errors = []

        for file_path in self.created_files:
            if file_path.endswith(".py"):
                self.log_step(
                    f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É: {Path(file_path).name}", "PROCESS"
                )

                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        source = f.read()

                    # –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
                    compile(source, file_path, "exec")
                    self.log_step(f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å {Path(file_path).name}: OK", "SUCCESS")

                except SyntaxError as e:
                    error_msg = f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ {Path(file_path).name}: {e}"
                    self.log_step(error_msg, "ERROR")
                    syntax_errors.append(error_msg)

                except Exception as e:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {Path(file_path).name}: {e}"
                    self.log_step(error_msg, "ERROR")
                    syntax_errors.append(error_msg)

        return syntax_errors

    def check_import_errors(self) -> List[str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ–º–∏–ª–∫–∏ —ñ–º–ø–æ—Ä—Ç—É"""
        self.log_step("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫ —ñ–º–ø–æ—Ä—Ç—É")

        import_errors = []

        for file_path in self.created_files:
            if file_path.endswith(".py"):
                self.log_step(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤: {Path(file_path).name}", "PROCESS")

                try:
                    # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
                    if str(self.project_path) not in sys.path:
                        sys.path.insert(0, str(self.project_path))

                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–æ–¥—É–ª—è
                    module_name = Path(file_path).stem

                    # –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
                    if module_name in sys.modules:
                        importlib.reload(sys.modules[module_name])
                    else:
                        importlib.import_module(module_name)

                    self.log_step(f"–Ü–º–ø–æ—Ä—Ç {module_name}: OK", "SUCCESS")

                except ImportError as e:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –≤ {Path(file_path).name}: {e}"
                    self.log_step(error_msg, "ERROR")
                    import_errors.append(error_msg)

                except Exception as e:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {Path(file_path).name}: {e}"
                    self.log_step(error_msg, "ERROR")
                    import_errors.append(error_msg)

        return import_errors

    def check_dependencies(self) -> List[str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
        self.log_step("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")

        dependency_errors = []

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ requirements.txt
        req_file = self.project_path / "requirements.txt"
        if req_file.exists():
            try:
                result = subprocess.run(
                    [sys.executable, "-m", "pip", "check"],
                    capture_output=True,
                    text=True,
                    cwd=self.project_path,
                )

                if result.returncode == 0:
                    self.log_step("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: OK", "SUCCESS")
                else:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {result.stdout} {result.stderr}"
                    self.log_step(error_msg, "ERROR")
                    dependency_errors.append(error_msg)

            except Exception as e:
                error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}"
                self.log_step(error_msg, "ERROR")
                dependency_errors.append(error_msg)
        else:
            self.log_step("requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "WARNING")

        return dependency_errors

    def fix_errors_automatically(self, errors: List[str]) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
        self.log_step("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫")

        if not errors:
            self.log_step("–ü–æ–º–∏–ª–∫–∏ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "SUCCESS")
            return True

        # –ü—Ä–æ—Å—Ç–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        fixed_count = 0

        for error in errors:
            self.log_step(f"–°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏: {error[:50]}...", "PROCESS")

            # –¢—É—Ç –±–∏ –±—É–≤ —Å–∫–ª–∞–¥–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
            if "import" in error.lower():
                self.log_step("–°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É —ñ–º–ø–æ—Ä—Ç—É", "PROCESS")
                # –¢—É—Ç –±–∏ –¥–æ–¥–∞–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏

            elif "syntax" in error.lower():
                self.log_step("–°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É", "PROCESS")
                # –¢—É—Ç –±–∏ –≤–∏–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

            # –ü–æ–∫–∏ —â–æ –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ "—á–∞—Å—Ç–∫–æ–≤–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ"
            fixed_count += 1

        if fixed_count > 0:
            self.log_step(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø–æ–º–∏–ª–æ–∫", "SUCCESS")
            return True
        else:
            self.log_step("–ü–æ–º–∏–ª–∫–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ", "ERROR")
            return False

    def run_in_dev_mode(self) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ–µ–∫—Ç –≤ dev —Ä–µ–∂–∏–º—ñ"""
        self.log_step("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç—É –≤ dev —Ä–µ–∂–∏–º—ñ")

        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ main.py
            main_file = self.project_path / "main.py"
            if main_file.exists():
                result = subprocess.run(
                    [sys.executable, str(main_file), "--test"],
                    capture_output=True,
                    text=True,
                    cwd=self.project_path,
                    timeout=10,
                )

                if result.returncode == 0:
                    self.log_step("–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ", "SUCCESS")
                    return True, result.stdout
                else:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {result.stderr}"
                    self.log_step(error_msg, "ERROR")
                    return False, result.stderr
            else:
                self.log_step("main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "ERROR")
                return False, "main.py not found"

        except subprocess.TimeoutExpired:
            self.log_step(
                "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫—É (—Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä—ñ–≤)", "WARNING"
            )
            return True, "Timeout (possibly normal for servers)"

        except Exception as e:
            error_msg = f"–í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}"
            self.log_step(error_msg, "ERROR")
            return False, str(e)

    def interactive_error_fixing_loop(self, max_iterations: int = 5):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ü–∏–∫–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
        self.log_step("–ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫")

        for iteration in range(1, max_iterations + 1):
            self.log_step(f"–Ü—Ç–µ—Ä–∞—Ü—ñ—è {iteration} –∑ {max_iterations}")

            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏
            all_errors = []
            all_errors.extend(self.check_syntax_errors())
            all_errors.extend(self.check_import_errors())
            all_errors.extend(self.check_dependencies())

            if not all_errors:
                self.log_step(
                    "–ü–æ–º–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç", "SUCCESS"
                )

                success, output = self.run_in_dev_mode()
                if success:
                    self.log_step("–ü—Ä–æ–µ–∫—Ç –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–æ–º–∏–ª–æ–∫!", "SUCCESS")
                    return True
                else:
                    self.log_step("–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É:", "ERROR")
                    print(output)
                    all_errors.append(f"Runtime error: {output}")

            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏
            if all_errors:
                self.log_step(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(all_errors)} –ø–æ–º–∏–ª–æ–∫", "ERROR")
                for error in all_errors:
                    print(f"   ‚ùå {error}")

                self.wait_for_user(
                    "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ –ø–æ–º–∏–ª–∫–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è —Å–ø—Ä–æ–±–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                )

                fixed = self.fix_errors_automatically(all_errors)
                if not fixed:
                    self.log_step("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ", "ERROR")
                    return False

            time.sleep(2)  # –ü–∞—É–∑–∞ –º—ñ–∂ —ñ—Ç–µ—Ä–∞—Ü—ñ—è–º–∏

        self.log_step(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —ñ—Ç–µ—Ä–∞—Ü—ñ–π ({max_iterations})", "WARNING")
        return False

    def run_full_workflow(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –≤–æ—Ä–∫—Ñ–ª–æ—É"""
        print("üöÄ NIMDA –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –í–æ—Ä–∫—Ñ–ª–æ—É –†–æ–∑—Ä–æ–±–∫–∏")
        print("=" * 50)

        try:
            # –ö—Ä–æ–∫ 1: –ß–∏—Ç–∞–Ω–Ω—è –ø–ª–∞–Ω—É
            plan_data = self.read_dev_plan()
            if not plan_data:
                return False

            self.wait_for_user("–ü–ª–∞–Ω –ø—Ä–æ—á–∏—Ç–∞–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?")

            # –ö—Ä–æ–∫ 2: –ü–æ–±—É–¥–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            self.build_directory_structure()
            self.wait_for_user("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∞. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?")

            # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
            self.create_files()
            self.wait_for_user("–§–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–º–∏–ª–æ–∫?")

            # –ö—Ä–æ–∫ 4: –¶–∏–∫–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
            success = self.interactive_error_fixing_loop()

            # –ü—ñ–¥—Å—É–º–æ–∫
            print("\n" + "=" * 50)
            print("üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø")
            print("=" * 50)
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤: {len(self.created_dirs)}")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(self.created_files)}")
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–æ–∫: {len(self.errors_found)}")
            print(f"–£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {'‚úÖ' if success else '‚ùå'}")

            if self.created_dirs:
                print("\n–°—Ç–≤–æ—Ä–µ–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏:")
                for dir_path in self.created_dirs:
                    print(f"   üìÅ {dir_path}")

            if self.created_files:
                print("\n–°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
                for file_path in self.created_files:
                    print(f"   üìÑ {file_path}")

            if self.errors_found:
                print("\n–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏:")
                for error in self.errors_found:
                    print(f"   ‚ùå {error}")

            return success

        except KeyboardInterrupt:
            self.log_step("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", "WARNING")
            return False

        except Exception as e:
            self.log_step(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", "ERROR")
            traceback.print_exc()
            return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    workflow = InteractiveDevWorkflow()
    success = workflow.run_full_workflow()

    if success:
        print("\nüéâ –í–æ—Ä–∫—Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("\n‚ùå –í–æ—Ä–∫—Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏.")

    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
