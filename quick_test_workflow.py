#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Ä–∫—Ñ–ª–æ—É –±–µ–∑ –ø–∞—É–∑
"""

import sys

sys.path.append("/Users/dev/Documents/nimda_agent_plugin")

from interactive_dev_workflow import InteractiveDevWorkflow


class QuickTestWorkflow(InteractiveDevWorkflow):
    """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –±–µ–∑ –ø–∞—É–∑"""

    def wait_for_user(self, message: str = ""):
        """–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–∞—É–∑–∏"""
        pass

    def interactive_error_fixing_loop(self, max_iterations: int = 2):
        """–°–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ü–∏–∫–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
        return super().interactive_error_fixing_loop(max_iterations)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É"""
    print("üöÄ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç NIMDA –≤–æ—Ä–∫—Ñ–ª–æ—É (–±–µ–∑ –ø–∞—É–∑)")
    print("=" * 50)

    workflow = QuickTestWorkflow()
    success = workflow.run_full_workflow()

    if success:
        print("\nüéâ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("\n‚ùå –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏.")

    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
