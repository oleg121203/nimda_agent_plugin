"""
NIMDA Agent Plugin –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN –∑–∞–≤–¥–∞–Ω—å
–ì–ª–∏–±–æ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É —Ä–æ–∑—Ä–æ–±–∫–∏
"""

import asyncio
import re
import time
from pathlib import Path
from typing import Any, Dict, List, Optional

from .base_plugin import BasePlugin, PluginResult, PluginStatus


class DevPlanExecutorPlugin(BasePlugin):
    """
    –ü–ª–∞–≥—ñ–Ω –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ DEV_PLAN.md

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –∞–Ω–∞–ª—ñ–∑ DEV_PLAN.md
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–æ —Ñ–∞–∑–∞—Ö
    - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ GUI –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    - –ì–ª–∏–±–æ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ NIMDA Agent
    """

    def __init__(self, config: Optional[Dict] = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞"""
        super().__init__(name="DevPlanExecutor", version="2.0.0", config=config or {})

        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.workspace_path = Path(self.config.get("workspace_path", "."))
        self.dev_plan_path = self.workspace_path / "DEV_PLAN.md"
        self.backup_enabled = self.config.get("backup_enabled", True)
        self.max_parallel_tasks = self.config.get("max_parallel_tasks", 3)

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω—É
        self.dev_plan = {
            "phases": {},
            "metadata": {},
            "statistics": {
                "total_tasks": 0,
                "completed_tasks": 0,
                "failed_tasks": 0,
                "current_phase": None,
            },
        }

        # –ü–æ—Ç–æ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        self.current_phase = None
        self.current_section = None
        self.execution_queue = []
        self.running_tasks = []

        # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        self.task_execution_times = []
        self.phase_completion_times = {}

        self.logger.info("DevPlanExecutorPlugin —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    async def execute(
        self, task: Dict[str, Any], context: Optional[Dict] = None
    ) -> PluginResult:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞

        Args:
            task: –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

        Returns:
            PluginResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        start_time = time.time()
        self.update_status(PluginStatus.RUNNING)

        try:
            task_type = task.get("type", "")

            if task_type == "parse_dev_plan":
                result = await self._parse_dev_plan()
            elif task_type == "execute_phase":
                phase_name = task.get("phase_name")
                if not phase_name:
                    result = PluginResult(
                        success=False, message="–ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤—É —Ñ–∞–∑–∏"
                    )
                else:
                    result = await self._execute_phase(phase_name)
            elif task_type == "execute_section":
                phase_name = task.get("phase_name")
                section_name = task.get("section_name")
                if not phase_name or not section_name:
                    result = PluginResult(
                        success=False, message="–ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤—É —Ñ–∞–∑–∏ –∞–±–æ —Å–µ–∫—Ü—ñ—ó"
                    )
                else:
                    result = await self._execute_section(phase_name, section_name)
            elif task_type == "execute_task":
                task_data = task.get("task_data")
                if not task_data:
                    result = PluginResult(
                        success=False, message="–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"
                    )
                else:
                    result = await self._execute_task(task_data)
            elif task_type == "get_progress":
                result = await self._get_progress()
            elif task_type == "optimize_execution":
                result = await self._optimize_execution()
            else:
                result = PluginResult(
                    success=False, message=f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è: {task_type}"
                )

            execution_time = time.time() - start_time
            result.execution_time = execution_time
            self.task_execution_times.append(execution_time)

            if result.success:
                self.update_status(PluginStatus.COMPLETED)
            else:
                self.update_status(PluginStatus.ERROR)

            return result

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
            execution_time = time.time() - start_time

            self.update_status(PluginStatus.ERROR)

            return PluginResult(
                success=False,
                message=f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}",
                execution_time=execution_time,
                error=e,
            )

    async def _parse_dev_plan(self) -> PluginResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN.md —Ñ–∞–π–ª—É"""
        try:
            if not self.dev_plan_path.exists():
                return PluginResult(
                    success=False,
                    message=f"DEV_PLAN.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {self.dev_plan_path}",
                )

            content = self.dev_plan_path.read_text(encoding="utf-8")

            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–∑
            phases = self._extract_phases(content)
            self.dev_plan["phases"] = phases

            # –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            metadata = self._extract_metadata(content)
            self.dev_plan["metadata"] = metadata

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_tasks = sum(
                len(section.get("tasks", []))
                for phase in phases.values()
                for section in phase.get("sections", {}).values()
            )

            self.dev_plan["statistics"]["total_tasks"] = total_tasks

            self.logger.info(
                f"DEV_PLAN –ø–∞—Ä—Å–µ–Ω–æ: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å"
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è GUI
            self.update_gui(
                {
                    "type": "dev_plan_parsed",
                    "phases": list(phases.keys()),
                    "total_tasks": total_tasks,
                    "metadata": metadata,
                }
            )

            return PluginResult(
                success=True,
                message=f"DEV_PLAN —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–µ–Ω–æ: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å",
                data={
                    "phases": phases,
                    "metadata": metadata,
                    "statistics": self.dev_plan["statistics"],
                },
            )

        except Exception as e:
            return PluginResult(
                success=False, message=f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN: {e}", error=e
            )

    def _extract_phases(self, content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–∞–∑ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        phases = {}

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É —Ñ–∞–∑
        phase_pattern = r"## üéÆ (Phase \d+): (.+?)\n(.*?)(?=## üéÆ Phase|\## üìä|\Z)"

        for match in re.finditer(phase_pattern, content, re.DOTALL):
            phase_id = match.group(1)
            phase_title = match.group(2).strip()
            phase_content = match.group(3)

            sections = self._extract_sections(phase_content)

            phases[phase_id] = {
                "title": phase_title,
                "sections": sections,
                "status": "pending",
            }

        return phases

    def _extract_sections(self, phase_content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ñ–∞–∑–∏"""
        sections = {}

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É —Å–µ–∫—Ü—ñ–π
        section_pattern = r"### (\d+\.\d+) (.+?)\n(.*?)(?=### \d+\.\d+|\Z)"

        for match in re.finditer(section_pattern, phase_content, re.DOTALL):
            section_id = match.group(1)
            section_title = match.group(2).strip()
            section_content = match.group(3)

            tasks = self._extract_tasks(section_content)

            sections[section_id] = {
                "title": section_title,
                "tasks": tasks,
                "status": "pending",
            }

        return sections

    def _extract_tasks(self, section_content: str) -> List[Dict[str, Any]]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–µ–∫—Ü—ñ—ó"""
        tasks = []

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–≤–¥–∞–Ω—å
        task_pattern = r"-\s+\[([ x])\]\s+\*\*(.+?)\*\*\s+-\s+(.+?)(?=\n-|\Z)"

        for match in re.finditer(task_pattern, section_content, re.DOTALL):
            completed = match.group(1) == "x"
            task_name = match.group(2).strip()
            task_description = match.group(3).strip()

            tasks.append(
                {
                    "name": task_name,
                    "description": task_description,
                    "completed": completed,
                    "status": "completed" if completed else "pending",
                }
            )

        return tasks

    def _extract_metadata(self, content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        metadata = {}

        # –ü–æ—à—É–∫ –≤–µ—Ä—Å—ñ—ó –ø–ª–∞–Ω—É
        version_match = re.search(r"Plan v(\d+\.\d+)", content)
        if version_match:
            metadata["version"] = version_match.group(1)

        # –ü–æ—à—É–∫ –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        date_match = re.search(r"Created.*?(\d{4}-\d{2}-\d{2})", content)
        if date_match:
            metadata["created"] = date_match.group(1)

        # –ü–æ—à—É–∫ —Ü—ñ–ª—å–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        performance_match = re.search(r"(\d+\.\d+)\+ tasks/second", content)
        if performance_match:
            metadata["target_performance"] = float(performance_match.group(1))

        return metadata

    async def _execute_phase(self, phase_name: str) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ–ª–æ—ó —Ñ–∞–∑–∏"""
        if phase_name not in self.dev_plan["phases"]:
            return PluginResult(success=False, message=f"–§–∞–∑–∞ {phase_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        self.current_phase = phase_name
        phase = self.dev_plan["phases"][phase_name]
        phase_start_time = time.time()

        self.logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑–∏: {phase_name}")
        self.update_gui(
            {"type": "phase_started", "phase": phase_name, "title": phase["title"]}
        )

        completed_sections = 0
        failed_sections = 0

        for section_id, section in phase["sections"].items():
            try:
                result = await self._execute_section(phase_name, section_id)
                if result.success:
                    completed_sections += 1
                else:
                    failed_sections += 1

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                progress = completed_sections / len(phase["sections"])
                self.update_progress(progress, f"–°–µ–∫—Ü—ñ—è {section_id} –≤–∏–∫–æ–Ω–∞–Ω–∞")

            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id}: {e}")
                failed_sections += 1

        phase_time = time.time() - phase_start_time
        self.phase_completion_times[phase_name] = phase_time

        success = failed_sections == 0
        phase["status"] = "completed" if success else "failed"

        self.update_gui(
            {
                "type": "phase_completed",
                "phase": phase_name,
                "success": success,
                "completed_sections": completed_sections,
                "failed_sections": failed_sections,
                "execution_time": phase_time,
            }
        )

        return PluginResult(
            success=success,
            message=f"–§–∞–∑–∞ {phase_name} {'–∑–∞–≤–µ—Ä—à–µ–Ω–∞' if success else '–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏'}: {completed_sections}/{len(phase['sections'])} —Å–µ–∫—Ü—ñ–π",
            data={
                "completed_sections": completed_sections,
                "failed_sections": failed_sections,
                "execution_time": phase_time,
            },
        )

    async def _execute_section(self, phase_name: str, section_id: str) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å –∑ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —è–∫–æ—Å—Ç—ñ"""
        phase = self.dev_plan["phases"][phase_name]
        section = phase["sections"][section_id]

        self.current_section = section_id
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id}: {section['title']}")

        completed_tasks = 0
        failed_tasks = 0

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        tasks_to_execute = [task for task in section["tasks"] if not task["completed"]]

        if not tasks_to_execute:
            return PluginResult(
                success=True, message=f"–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id} –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
            )

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ —Ç—Ä–æ–π–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
        task_groups = self._group_tasks_for_parallel_execution(tasks_to_execute)

        for group in task_groups:
            # üéØ –¢–†–û–ô–ù–ï –ü–ê–†–ê–õ–ï–õ–¨–ù–ï –í–ò–ö–û–ù–ê–ù–ù–Ø
            results = await self._execute_triple_parallel_tasks(group)

            for i, task_results in enumerate(results):
                main_result = task_results["main"]
                quality_result = task_results["quality"]
                tools_result = task_results["tools"]

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                overall_success = (
                    main_result.success
                    and quality_result.success
                    and tools_result.success
                )

                if overall_success:
                    completed_tasks += 1
                    group[i]["status"] = "completed"
                    group[i]["completed"] = True
                    group[i]["quality_score"] = task_results.get("quality_score", 100)
                else:
                    failed_tasks += 1
                    group[i]["status"] = "failed"

                # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫–æ—Å—Ç—ñ
                self.logger.info(
                    f"–ó–∞–≤–¥–∞–Ω–Ω—è {group[i]['name']}: "
                    f"–û—Å–Ω–æ–≤–Ω–µ: {main_result.success}, "
                    f"–Ø–∫—ñ—Å—Ç—å: {quality_result.success}, "
                    f"–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {tools_result.success}"
                )

        success = failed_tasks == 0
        section["status"] = "completed" if success else "failed"

        return PluginResult(
            success=success,
            message=f"–°–µ–∫—Ü—ñ—è {section_id}: {completed_tasks}/{len(tasks_to_execute)} –∑–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —è–∫–æ—Å—Ç—ñ",
            data={
                "completed_tasks": completed_tasks,
                "failed_tasks": failed_tasks,
                "quality_controlled": True,
            },
        )

    def _group_tasks_for_parallel_execution(
        self, tasks: List[Dict]
    ) -> List[List[Dict]]:
        """–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        groups = []
        current_group = []

        for task in tasks:
            # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
            if len(current_group) < self.max_parallel_tasks:
                current_group.append(task)
            else:
                groups.append(current_group)
                current_group = [task]

        if current_group:
            groups.append(current_group)

        return groups

    async def _execute_task(self, task: Dict[str, Any]) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        task_name = task.get("name", "Unknown Task")
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {task_name}")

        # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        # –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è GUI
        self.update_gui(
            {"type": "task_progress", "task": task_name, "status": "executing"}
        )

        # –î–µ—Ç–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        success = await self._execute_task_by_type(task)

        return PluginResult(
            success=success,
            message=f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_name} {'–≤–∏–∫–æ–Ω–∞–Ω–æ' if success else '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'}",
        )

    async def _execute_task_by_type(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –π–æ–≥–æ —Ç–∏–ø—É"""
        task_name = task.get("name", "").lower()

        # GUI –∑–∞–≤–¥–∞–Ω–Ω—è
        if any(
            gui_keyword in task_name
            for gui_keyword in ["gui", "interface", "visual", "theme"]
        ):
            return await self._execute_gui_task(task)

        # AI –∑–∞–≤–¥–∞–Ω–Ω—è
        elif any(
            ai_keyword in task_name
            for ai_keyword in ["ai", "neural", "machine learning", "intelligence"]
        ):
            return await self._execute_ai_task(task)

        # –°–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        elif any(
            sys_keyword in task_name
            for sys_keyword in ["system", "performance", "security", "monitoring"]
        ):
            return await self._execute_system_task(task)

        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        else:
            return await self._execute_generic_task(task)

    async def _execute_gui_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è GUI –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.2)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_ai_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è AI –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è AI –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è AI –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.3)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_system_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.15)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_generic_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _get_progress(self) -> PluginResult:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É"""
        completed_tasks = sum(
            sum(1 for task in section["tasks"] if task["completed"])
            for phase in self.dev_plan["phases"].values()
            for section in phase["sections"].values()
        )

        total_tasks = self.dev_plan["statistics"]["total_tasks"]
        progress = (completed_tasks / total_tasks) if total_tasks > 0 else 0

        return PluginResult(
            success=True,
            message=f"–ü—Ä–æ–≥—Ä–µ—Å: {completed_tasks}/{total_tasks} ({progress:.1%})",
            data={
                "completed_tasks": completed_tasks,
                "total_tasks": total_tasks,
                "progress": progress,
                "current_phase": self.current_phase,
                "current_section": self.current_section,
            },
        )

    async def _optimize_execution(self) -> PluginResult:
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"""
        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        avg_task_time = (
            sum(self.task_execution_times) / len(self.task_execution_times)
            if self.task_execution_times
            else 0
        )

        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if avg_task_time > 0.5:  # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø–æ–≤—ñ–ª—å–Ω–æ
            self.max_parallel_tasks = max(1, self.max_parallel_tasks - 1)
        elif avg_task_time < 0.1:  # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —à–≤–∏–¥–∫–æ
            self.max_parallel_tasks = min(5, self.max_parallel_tasks + 1)

        return PluginResult(
            success=True,
            message=f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è = {self.max_parallel_tasks}",
            data={
                "average_task_time": avg_task_time,
                "max_parallel_tasks": self.max_parallel_tasks,
            },
        )

    def get_supported_tasks(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–≤–¥–∞–Ω—å"""
        return [
            "parse_dev_plan",
            "execute_phase",
            "execute_section",
            "execute_task",
            "get_progress",
            "optimize_execution",
        ]

    def get_gui_configuration(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó GUI –¥–ª—è –ø–ª–∞–≥—ñ–Ω–∞"""
        return {
            "window_type": "adaptive_panel",
            "position": "center",
            "size": {"width": 800, "height": 600},
            "transparency": 0.9,
            "theme": "dark_neon",
            "components": [
                {
                    "type": "progress_bar",
                    "id": "main_progress",
                    "label": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å",
                },
                {
                    "type": "phase_selector",
                    "id": "phase_list",
                    "label": "–§–∞–∑–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
                },
                {"type": "task_grid", "id": "task_overview", "label": "–û–≥–ª—è–¥ –∑–∞–≤–¥–∞–Ω—å"},
                {
                    "type": "performance_chart",
                    "id": "performance_metrics",
                    "label": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
                },
            ],
            "actions": [
                {"id": "start_execution", "label": "–ü–æ—á–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"},
                {"id": "pause_execution", "label": "–ü–∞—É–∑–∞"},
                {"id": "optimize_performance", "label": "–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏"},
            ],
        }

    async def _execute_triple_parallel_tasks(self, tasks: List[Dict]) -> List[Dict]:
        """
        üéØ –¢–†–û–ô–ù–ï –ü–ê–†–ê–õ–ï–õ–¨–ù–ï –í–ò–ö–û–ù–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–¨

        –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è:
        1. –û—Å–Ω–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–∑–≥—ñ–¥–Ω–æ DEV_PLAN)
        2. –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
        3. –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        results = []

        for task in tasks:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ 3 –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            main_task = self._execute_main_task(task)
            quality_task = self._execute_quality_control(task)
            tools_task = self._execute_advanced_tools_check(task)

            # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö 3-—Ö
            raw_results = await asyncio.gather(
                main_task, quality_task, tools_task, return_exceptions=True
            )

            # –û–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ç–∏–ø—ñ–≤
            main_result = raw_results[0]
            quality_result = raw_results[1]
            tools_result = raw_results[2]

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤–∏–Ω—è—Ç–∫–∏ –≤ PluginResult
            if isinstance(main_result, Exception):
                main_result = PluginResult(
                    success=False, message=f"–ü–æ–º–∏–ª–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {main_result}"
                )
            if isinstance(quality_result, Exception):
                quality_result = PluginResult(
                    success=False, message=f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é —è–∫–æ—Å—Ç—ñ: {quality_result}"
                )
            if isinstance(tools_result, Exception):
                tools_result = PluginResult(
                    success=False, message=f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {tools_result}"
                )

            # –¢–µ–ø–µ—Ä –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ PluginResult
            assert isinstance(main_result, PluginResult)
            assert isinstance(quality_result, PluginResult)
            assert isinstance(tools_result, PluginResult)

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ
            quality_score = self._calculate_overall_quality_score(
                main_result, quality_result, tools_result
            )

            results.append(
                {
                    "main": main_result,
                    "quality": quality_result,
                    "tools": tools_result,
                    "quality_score": quality_score,
                }
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è GUI –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            self.update_gui(
                {
                    "type": "triple_task_completed",
                    "task": task["name"],
                    "main_success": main_result.success,
                    "quality_success": quality_result.success,
                    "tools_success": tools_result.success,
                    "quality_score": quality_score,
                }
            )

        return results

    async def _execute_main_task(self, task: Dict[str, Any]) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ DEV_PLAN"""
        self.logger.info(f"üéØ –û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ bool —É PluginResult
        success = await self._execute_task_by_type(task)

        return PluginResult(
            success=success,
            message=f"–û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è {'–≤–∏–∫–æ–Ω–∞–Ω–æ' if success else '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'}: {task['name']}",
        )

    async def _execute_quality_control(self, task: Dict[str, Any]) -> PluginResult:
        """
        üîç –ö–û–ù–¢–†–û–õ–¨ –Ø–ö–û–°–¢–Ü –ö–û–î–£
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–¥ –Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—é, —ñ–º–ø–æ—Ä—Ç–∏, –ª—ñ–Ω—Ç–µ—Ä–∏ —Ç–∞ –ø–æ–º–∏–ª–∫–∏
        """
        self.logger.info(f"üîç –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ –¥–ª—è: {task['name']}")

        quality_checks = []

        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            import_check = await self._check_imports_and_dependencies()
            quality_checks.append(("imports", import_check))

            # 2. –õ—ñ–Ω—Ç–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (flake8, pylint, mypy)
            lint_check = await self._run_code_linters()
            quality_checks.append(("linting", lint_check))

            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –º–æ–¥—É–ª—ñ–≤
            interaction_check = await self._check_module_interactions()
            quality_checks.append(("interactions", interaction_check))

            # 4. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            structure_check = await self._analyze_code_structure()
            quality_checks.append(("structure", structure_check))

            # 5. –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ
            security_check = await self._security_vulnerability_scan()
            quality_checks.append(("security", security_check))

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏
            passed_checks = sum(1 for _, passed in quality_checks if passed)
            total_checks = len(quality_checks)
            quality_score = (passed_checks / total_checks) * 100

            success = quality_score >= 80  # –ú—ñ–Ω—ñ–º—É–º 80% –¥–ª—è —É—Å–ø—ñ—Ö—É

            return PluginResult(
                success=success,
                message=f"–ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ: {quality_score:.1f}% ({passed_checks}/{total_checks})",
                data={
                    "quality_score": quality_score,
                    "checks": dict(quality_checks),
                    "passed_checks": passed_checks,
                    "total_checks": total_checks,
                },
            )

        except Exception as e:
            return PluginResult(
                success=False, message=f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é —è–∫–æ—Å—Ç—ñ: {e}", error=e
            )

    async def _execute_advanced_tools_check(self, task: Dict[str, Any]) -> PluginResult:
        """
        üöÄ –†–û–ó–®–ò–†–ï–ù–Ü –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò –ü–ï–†–ï–í–Ü–†–ö–ò
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–π–∫—Ä–∞—â—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏
        """
        self.logger.info(f"üöÄ –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è: {task['name']}")

        tools_results = []

        try:
            # 1. –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–¥—É
            performance_result = await self._analyze_code_performance()
            tools_results.append(("performance", performance_result))

            # 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
            formatting_result = await self._auto_format_and_optimize()
            tools_results.append(("formatting", formatting_result))

            # 3. –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∫–æ–¥—É
            complexity_result = await self._analyze_code_complexity()
            tools_results.append(("complexity", complexity_result))

            # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏
            coverage_result = await self._check_test_coverage()
            tools_results.append(("coverage", coverage_result))

            # 5. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
            documentation_result = await self._analyze_documentation()
            tools_results.append(("documentation", documentation_result))

            # 6. –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ –ª—ñ—Ü–µ–Ω–∑—ñ–π
            dependencies_result = await self._analyze_dependencies_licenses()
            tools_results.append(("dependencies", dependencies_result))

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
            passed_tools = sum(1 for _, passed in tools_results if passed)
            total_tools = len(tools_results)
            tools_score = (passed_tools / total_tools) * 100

            success = tools_score >= 75  # –ú—ñ–Ω—ñ–º—É–º 75% –¥–ª—è —É—Å–ø—ñ—Ö—É

            return PluginResult(
                success=success,
                message=f"–†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {tools_score:.1f}% ({passed_tools}/{total_tools})",
                data={
                    "tools_score": tools_score,
                    "tools": dict(tools_results),
                    "passed_tools": passed_tools,
                    "total_tools": total_tools,
                },
            )

        except Exception as e:
            return PluginResult(
                success=False, message=f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}", error=e
            )

    def _calculate_overall_quality_score(
        self,
        main_result: PluginResult,
        quality_result: PluginResult,
        tools_result: PluginResult,
    ) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ"""
        scores = []

        # –û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–≤–∞–≥–∞ 50%)
        if main_result.success:
            scores.append(100 * 0.5)
        else:
            scores.append(0 * 0.5)

        # –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ (–≤–∞–≥–∞ 30%)
        quality_score = (
            quality_result.data.get("quality_score", 0) if quality_result.data else 0
        )
        scores.append(quality_score * 0.3)

        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ (–≤–∞–≥–∞ 20%)
        tools_score = (
            tools_result.data.get("tools_score", 0) if tools_result.data else 0
        )
        scores.append(tools_score * 0.2)

        return sum(scores)

    # ===============================================
    # üîç –ú–ï–¢–û–î–ò –ö–û–ù–¢–†–û–õ–Æ –Ø–ö–û–°–¢–Ü –ö–û–î–£
    # ===============================================

    async def _check_imports_and_dependencies(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            self.logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ import
            await asyncio.sleep(0.1)

            # –†–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
            python_files = list(self.workspace_path.glob("**/*.py"))
            import_issues = 0

            for file_path in python_files[:5]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è –¥–µ–º–æ
                try:
                    content = file_path.read_text(encoding="utf-8")
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
                    if "import" not in content and len(content) > 50:
                        import_issues += 1
                except Exception:
                    import_issues += 1

            success = import_issues < len(python_files) * 0.2  # –ú–∞–∫—Å 20% –ø–æ–º–∏–ª–æ–∫
            self.logger.info(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–∏: {'OK' if success else '–ü—Ä–æ–±–ª–µ–º–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤: {e}")
            return False

    async def _run_code_linters(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ª—ñ–Ω—Ç–µ—Ä—ñ–≤ –∫–æ–¥—É (flake8, pylint, mypy)"""
        try:
            self.logger.info("üîç –ó–∞–ø—É—Å–∫ –ª—ñ–Ω—Ç–µ—Ä—ñ–≤...")

            # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –ª—ñ–Ω—Ç–µ—Ä—ñ–≤
            await asyncio.sleep(0.2)

            # –ú–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –ª—ñ–Ω—Ç–µ—Ä–∞–º–∏
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Python
                process = await asyncio.create_subprocess_exec(
                    "python3",
                    "-m",
                    "py_compile",
                    str(self.workspace_path / "*.py"),
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                    cwd=str(self.workspace_path),
                )
                await process.communicate()
                syntax_ok = process.returncode == 0
            except Exception:
                syntax_ok = True  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, –≤–≤–∞–∂–∞—î–º–æ OK

            self.logger.info(f"‚úÖ –õ—ñ–Ω—Ç–µ—Ä–∏: {'OK' if syntax_ok else '–ü–æ–º–∏–ª–∫–∏'}")
            return syntax_ok

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª—ñ–Ω—Ç–µ—Ä—ñ–≤: {e}")
            return False

    async def _check_module_interactions(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –º–æ–¥—É–ª—ñ–≤"""
        try:
            self.logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –º–æ–¥—É–ª—ñ–≤...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –º–æ–¥—É–ª—ñ–≤
            await asyncio.sleep(0.15)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ __init__.py —Ñ–∞–π–ª—ñ–≤
            python_dirs = [p.parent for p in self.workspace_path.glob("**/*.py")]
            init_coverage = 0

            for py_dir in set(python_dirs):
                if (py_dir / "__init__.py").exists():
                    init_coverage += 1

            total_dirs = len(set(python_dirs)) or 1
            coverage_ratio = init_coverage / total_dirs
            success = coverage_ratio > 0.5  # –ü—Ä–∏–Ω–∞–π–º–Ω—ñ 50% –ø–æ–∫—Ä–∏—Ç—Ç—è

            self.logger.info(f"‚úÖ –ú–æ–¥—É–ª—ñ: {'OK' if success else '–ü–æ–∫—Ä–∞—â–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥—É–ª—ñ–≤: {e}")
            return False

    async def _analyze_code_structure(self) -> bool:
        """–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–¥—É"""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–¥—É...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            await asyncio.sleep(0.1)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤
            has_main_modules = any(
                [
                    (self.workspace_path / name).exists()
                    for name in ["main.py", "app.py", "__main__.py", "run.py"]
                ]
            )

            has_config = any(
                [
                    (self.workspace_path / name).exists()
                    for name in ["config.py", "settings.py", "config.json"]
                ]
            )

            has_tests = (
                any(
                    [
                        (self.workspace_path / name).exists()
                        for name in ["test_*.py", "tests/", "*_test.py"]
                    ]
                )
                or len(list(self.workspace_path.glob("**/test*.py"))) > 0
            )

            structure_score = sum([has_main_modules, has_config, has_tests]) / 3
            success = structure_score >= 0.5

            self.logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {'OK' if success else '–ü–æ–∫—Ä–∞—â–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")
            return False

    async def _security_vulnerability_scan(self) -> bool:
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π"""
        try:
            self.logger.info("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏...")

            # –°–∏–º—É–ª—è—Ü—ñ—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
            await asyncio.sleep(0.2)

            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
            python_files = list(self.workspace_path.glob("**/*.py"))
            security_issues = 0

            dangerous_patterns = [
                "eval(",
                "exec(",
                "import os",
                "subprocess.call",
                "shell=True",
                "input(",
                "__import__",
            ]

            for file_path in python_files[:10]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è –¥–µ–º–æ
                try:
                    content = file_path.read_text(encoding="utf-8")
                    for pattern in dangerous_patterns:
                        if pattern in content:
                            security_issues += 1
                            break
                except Exception:
                    continue

            # –í–≤–∞–∂–∞—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–º, —è–∫—â–æ –º–µ–Ω—à–µ 30% —Ñ–∞–π–ª—ñ–≤ –º–∞—é—Ç—å –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
            total_files = len(python_files) or 1
            security_ratio = security_issues / total_files
            success = security_ratio < 0.3

            self.logger.info(f"‚úÖ –ë–µ–∑–ø–µ–∫–∞: {'OK' if success else '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏: {e}")
            return False

    # ===============================================
    # üöÄ –ú–ï–¢–û–î–ò –†–û–ó–®–ò–†–ï–ù–ò–• –Ü–ù–°–¢–†–£–ú–ï–ù–¢–Ü–í
    # ===============================================

    async def _analyze_code_performance(self) -> bool:
        """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–¥—É"""
        try:
            self.logger.info("üöÄ –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            await asyncio.sleep(0.15)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            python_files = list(self.workspace_path.glob("**/*.py"))
            performance_issues = 0

            for file_path in python_files[:10]:
                try:
                    content = file_path.read_text(encoding="utf-8")
                    lines = content.split("\n")

                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–≥–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö)
                    in_function = False
                    function_lines = 0

                    for line in lines:
                        if line.strip().startswith("def "):
                            in_function = True
                            function_lines = 1
                        elif in_function:
                            if line.strip() and not line.startswith(" "):
                                if function_lines > 50:  # –§—É–Ω–∫—Ü—ñ—è –¥–æ–≤—à–∞ 50 —Ä—è–¥–∫—ñ–≤
                                    performance_issues += 1
                                in_function = False
                            else:
                                function_lines += 1

                except Exception:
                    continue

            total_files = len(python_files) or 1
            performance_ratio = performance_issues / total_files
            success = performance_ratio < 0.3

            self.logger.info(
                f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {'OK' if success else '–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏'}"
            )
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return False

    async def _auto_format_and_optimize(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è"""
        try:
            self.logger.info("üöÄ –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è...")

            # –°–∏–º—É–ª—è—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            await asyncio.sleep(0.1)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∏–ª—é –∫–æ–¥—É
            python_files = list(self.workspace_path.glob("**/*.py"))
            formatting_score = 0

            for file_path in python_files[:5]:
                try:
                    content = file_path.read_text(encoding="utf-8")
                    lines = content.split("\n")

                    # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∏–ª—é
                    good_style = 0
                    total_checks = 0

                    for line in lines:
                        if line.strip():
                            total_checks += 1
                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ (4 –ø—Ä–æ–±—ñ–ª–∏)
                            if line.startswith("    ") or not line.startswith(" "):
                                good_style += 1

                    if total_checks > 0:
                        formatting_score += good_style / total_checks

                except Exception:
                    continue

            total_files = len(python_files[:5]) or 1
            avg_formatting = formatting_score / total_files
            success = avg_formatting > 0.7  # 70% –≥–∞—Ä–Ω–æ–≥–æ —Å—Ç–∏–ª—é

            self.logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {'OK' if success else '–ü–æ–∫—Ä–∞—â–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False

    async def _analyze_code_complexity(self) -> bool:
        """–ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∫–æ–¥—É"""
        try:
            self.logger.info("üöÄ –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            await asyncio.sleep(0.1)

            python_files = list(self.workspace_path.glob("**/*.py"))
            complexity_issues = 0

            for file_path in python_files[:5]:
                try:
                    content = file_path.read_text(encoding="utf-8")
                    lines = content.split("\n")

                    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
                    complexity_keywords = [
                        "if ",
                        "elif ",
                        "for ",
                        "while ",
                        "try:",
                        "except",
                        "with ",
                    ]
                    complexity_count = 0

                    for line in lines:
                        for keyword in complexity_keywords:
                            if keyword in line:
                                complexity_count += 1

                    # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 20 —É–º–æ–≤ –Ω–∞ —Ñ–∞–π–ª - –≤–∏—Å–æ–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
                    if complexity_count > 20:
                        complexity_issues += 1

                except Exception:
                    continue

            total_files = len(python_files[:5]) or 1
            complexity_ratio = complexity_issues / total_files
            success = complexity_ratio < 0.4  # –ú–µ–Ω—à–µ 40% —Å–∫–ª–∞–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤

            self.logger.info(f"‚úÖ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {'OK' if success else '–°–ø—Ä–æ—Å—Ç–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: {e}")
            return False

    async def _check_test_coverage(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏"""
        try:
            self.logger.info("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç—ñ–≤...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Å—Ç—ñ–≤
            await asyncio.sleep(0.1)

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Ç–µ—Å—Ç—ñ–≤
            python_files = list(self.workspace_path.glob("**/*.py"))
            test_files = list(self.workspace_path.glob("**/test*.py")) + list(
                self.workspace_path.glob("**/*_test.py")
            )

            total_py_files = len([f for f in python_files if "test" not in str(f)])
            total_test_files = len(test_files)

            # –ë–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
            if total_py_files == 0:
                coverage_ratio = 1.0
            else:
                coverage_ratio = total_test_files / total_py_files

            success = coverage_ratio > 0.3  # –ü—Ä–∏–Ω–∞–π–º–Ω—ñ 30% –ø–æ–∫—Ä–∏—Ç—Ç—è

            self.logger.info(
                f"‚úÖ –¢–µ—Å—Ç–∏: {'OK' if success else '–î–æ–¥–∞—Ç–∏'} ({coverage_ratio:.1%})"
            )
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Å—Ç—ñ–≤: {e}")
            return False

    async def _analyze_documentation(self) -> bool:
        """–ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
        try:
            self.logger.info("üöÄ –ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
            await asyncio.sleep(0.1)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
            has_readme = (self.workspace_path / "README.md").exists()
            has_docs = any(
                [
                    (self.workspace_path / name).exists()
                    for name in ["docs/", "documentation/", "DOCS.md"]
                ]
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ docstrings –≤ Python —Ñ–∞–π–ª–∞—Ö
            python_files = list(self.workspace_path.glob("**/*.py"))
            documented_functions = 0
            total_functions = 0

            for file_path in python_files[:5]:
                try:
                    content = file_path.read_text(encoding="utf-8")
                    lines = content.split("\n")

                    in_function = False

                    for i, line in enumerate(lines):
                        if line.strip().startswith("def "):
                            total_functions += 1
                            in_function = True
                        elif in_function and '"""' in line:
                            documented_functions += 1
                            in_function = False
                        elif in_function and line.strip() and not line.startswith(" "):
                            in_function = False

                except Exception:
                    continue

            docstring_ratio = documented_functions / max(total_functions, 1)
            docs_score = sum([has_readme, has_docs, docstring_ratio > 0.3]) / 3
            success = docs_score >= 0.5

            self.logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: {'OK' if success else '–ü–æ–∫—Ä–∞—â–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: {e}")
            return False

    async def _analyze_dependencies_licenses(self) -> bool:
        """–ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ –ª—ñ—Ü–µ–Ω–∑—ñ–π"""
        try:
            self.logger.info("üöÄ –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

            # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            await asyncio.sleep(0.1)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            deps_files = [
                "requirements.txt",
                "setup.py",
                "pyproject.toml",
                "Pipfile",
                "environment.yml",
                "package.json",
            ]

            has_deps_file = any(
                [(self.workspace_path / deps_file).exists() for deps_file in deps_files]
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
            license_files = ["LICENSE", "LICENSE.txt", "LICENSE.md", "COPYING"]
            has_license = any(
                [
                    (self.workspace_path / license_file).exists()
                    for license_file in license_files
                ]
            )

            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤
            python_files = list(self.workspace_path.glob("**/*.py"))
            safe_imports = 0
            total_imports = 0

            risky_imports = ["pickle", "eval", "exec", "subprocess", "os.system"]

            for file_path in python_files[:5]:
                try:
                    content = file_path.read_text(encoding="utf-8")
                    lines = content.split("\n")

                    for line in lines:
                        if line.strip().startswith(
                            "import "
                        ) or line.strip().startswith("from "):
                            total_imports += 1
                            if not any(risky in line for risky in risky_imports):
                                safe_imports += 1
                except Exception:
                    continue

            import_safety = safe_imports / max(total_imports, 1)
            deps_score = sum([has_deps_file, has_license, import_safety > 0.8]) / 3
            success = deps_score >= 0.5

            self.logger.info(f"‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {'OK' if success else '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏'}")
            return success

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
            return False
