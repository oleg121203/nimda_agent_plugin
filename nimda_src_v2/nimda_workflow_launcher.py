#!/usr/bin/env python3
"""
üöÄ NIMDA Workflow Launcher v2.0
–ì–æ–ª–æ–≤–Ω–∏–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è NIMDA Agent Workflow System

–¶–µ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π workflow NIMDA Agent –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø–ª–∞–≥—ñ–Ω—ñ–≤.
–í–∫–ª—é—á–∞—î: Core —Å–∏—Å—Ç–µ–º–∏, Plugin Manager, DEV_PLAN Executor —Ç–∞ Advanced Tools.

–°—Ç–≤–æ—Ä–µ–Ω–æ: 15 –ª–∏–ø–Ω—è 2025
–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: nimda_src_v2 - Unified Workflow System
"""

import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("nimda_workflow.log")],
)

logger = logging.getLogger("NIMDA-Workflow-Launcher")


def setup_paths():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    current_dir = Path(__file__).parent
    sys.path.insert(0, str(current_dir))
    return current_dir


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É NIMDA Workflow"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ NIMDA Agent Workflow System v2.0")

    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤
        workflow_dir = setup_paths()
        logger.info(f"üìÅ –†–æ–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {workflow_dir}")

        # –Ü–º–ø–æ—Ä—Ç Core —Å–∏—Å—Ç–µ–º–∏
        from Core.plugin_system_runner import NIMDAPluginSystemRunner

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏
        system_runner = NIMDAPluginSystemRunner()

        logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤...")
        await system_runner.initialize()

        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN...")
        result = await system_runner.run_dev_plan_execution()

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è...")
        optimization_result = await system_runner.run_optimized_execution()

        logger.info("‚úÖ NIMDA Workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç DEV_PLAN: {result.get('status', 'Unknown')}")
        logger.info(f"‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: {optimization_result.get('status', 'Unknown')}")

    except ImportError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        logger.error("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
        sys.exit(1)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    print("üåü NIMDA Agent Workflow System v2.0")
    print("‚ïê" * 50)
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN")
    print("üîß –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏")
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏...")
    print("‚ïê" * 50)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        sys.exit(1)
