name: Codex Priority Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  merge_execution:
    if: contains(github.head_ref, 'codex') || contains(github.head_ref, 'bgrzdn-codex')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    outputs:
      success: ${{ steps.merge_execution.outputs.success }}
      conflicts: ${{ steps.merge_execution.outputs.conflicts }}
      strategy: ${{ steps.merge_execution.outputs.strategy }}
      files: ${{ steps.merge_execution.outputs.files }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "Codex Priority Bot"
        git config --global user.email "codex-priority@noreply.github.com"
        git config merge.ours.driver true

    - name: Execute Codex Priority Merge
      id: merge_execution
      run: |
        echo "Starting Codex priority merge process..."
        
        current_branch="${{ github.head_ref }}"
        target_branch="${{ github.base_ref }}"
        
        git fetch origin "$current_branch"
        git fetch origin "$target_branch"
        git checkout "$target_branch"
        
        echo "Attempting merge of $current_branch into $target_branch..."
        
        if git merge "origin/$current_branch" --no-commit --no-ff; then
          echo "Clean merge successful"
          git commit -m "Codex Priority Merge: Clean merge of $current_branch"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "conflicts=false" >> $GITHUB_OUTPUT
          echo "strategy=clean" >> $GITHUB_OUTPUT
        else
          echo "Conflicts detected - applying Codex priority resolution"
          
          git status --porcelain | grep "^UU" | while read -r line; do
            file=$(echo "$line" | cut -c4-)
            echo "Resolving conflict in $file with Codex priority"
            git checkout --theirs "$file"
            git add "$file"
          done
          
          git commit -m "Codex Priority Merge: Resolved conflicts favoring Codex - $current_branch"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "conflicts=true" >> $GITHUB_OUTPUT
          echo "strategy=codex_priority" >> $GITHUB_OUTPUT
        fi

    - name: Push changes
      if: steps.merge_execution.outputs.success == 'true'
      run: |
        git push origin ${{ github.base_ref }}
        echo "Changes pushed successfully"

    - name: Close pull request
      if: steps.merge_execution.outputs.success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            state: 'closed'
          });

    - name: Add merge comment
      if: steps.merge_execution.outputs.success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const conflictStatus = '${{ steps.merge_execution.outputs.conflicts }}' === 'true' ? 
            'with conflict resolution' : 'without conflicts';
          
          const message = 'Codex Priority Merge Completed\n\nBranch ${{ github.head_ref }} has been merged into main ' + conflictStatus + '.\nStrategy: Codex changes take precedence over existing code.\nAll conflicts resolved in favor of Codex implementation.';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });

  label_codex_pr:
    if: contains(github.head_ref, 'codex') || contains(github.head_ref, 'bgrzdn-codex')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
    - name: Add Codex labels
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['codex-priority', 'auto-merge', 'priority-resolution']
          });
