name: Adaptive Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.detect.outputs.python-version }}
      has-requirements: ${{ steps.detect.outputs.has-requirements }}
      has-tests: ${{ steps.detect.outputs.has-tests }}
      has-nimda: ${{ steps.detect.outputs.has-nimda }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect project environment
      id: detect
      run: |
        # –î–µ—Ç–µ–∫—Ü—ñ—è Python –≤–µ—Ä—Å—ñ—ó –∑ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if [ -f "nimda_env/pyvenv.cfg" ]; then
          python_version=$(grep "version" nimda_env/pyvenv.cfg | cut -d'=' -f2 | tr -d ' ' | cut -d'.' -f1,2)
          echo "python-version=$python_version" >> $GITHUB_OUTPUT
        else
          echo "python-version=3.11" >> $GITHUB_OUTPUT
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
        echo "has-requirements=$([ -f requirements.txt ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "has-tests=$([ -d tests ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "has-nimda=$([ -f nimda_agent_plugin/run_nimda_agent.py ] && echo true || echo false)" >> $GITHUB_OUTPUT

  test:
    needs: detect-environment
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f nimda_agent_plugin/requirements.txt ]; then pip install -r nimda_agent_plugin/requirements.txt; fi
        pip install pytest pytest-cov black flake8 mypy
      shell: bash

    - name: Lint with flake8
      run: |
        # –ó—É–ø–∏–Ω–∏—Ç–∏—Å—è –Ω–∞ –ø–æ–º–∏–ª–∫–∞—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —ñ–º–µ–Ω–∞—Ö
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: black --check . || echo "Formatting issues found"

    - name: Type check with mypy
      run: mypy . --ignore-missing-imports || echo "Type issues found"
      continue-on-error: true

    - name: Test with pytest
      if: needs.detect-environment.outputs.has-tests == 'true'
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Test NIMDA Agent
      if: needs.detect-environment.outputs.has-nimda == 'true'
      run: |
        cd nimda_agent_plugin
        python run_nimda_agent.py --command "—Å—Ç–∞—Ç—É—Å" || echo "NIMDA Agent test completed"

    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  vs-code-compatibility:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Test VS Code compatibility
      run: |
        echo "üîç Checking VS Code workspace configuration..."
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .vscode —Ñ–∞–π–ª—ñ–≤
        if [ -d ".vscode" ]; then
          echo "‚úÖ VS Code workspace detected"
          ls -la .vscode/
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ tasks.json
        if [ -f ".vscode/tasks.json" ]; then
          echo "‚úÖ Tasks configuration found"
          cat .vscode/tasks.json
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ settings.json
        if [ -f ".vscode/settings.json" ]; then
          echo "‚úÖ Workspace settings found"
        fi
        
        echo "üîó VS Code integration check completed"
