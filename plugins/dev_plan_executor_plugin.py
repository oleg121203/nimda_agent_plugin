"""
NIMDA Agent Plugin –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è DEV_PLAN –∑–∞–≤–¥–∞–Ω—å
–ì–ª–∏–±–æ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É —Ä–æ–∑—Ä–æ–±–∫–∏
"""

import asyncio
import json
import re
import subprocess
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from .base_plugin import BasePlugin, PluginResult, PluginStatus


class DevPlanExecutorPlugin(BasePlugin):
    """
    –ü–ª–∞–≥—ñ–Ω –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ DEV_PLAN.md

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –∞–Ω–∞–ª—ñ–∑ DEV_PLAN.md
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–æ —Ñ–∞–∑–∞—Ö
    - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ GUI –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    - –ì–ª–∏–±–æ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ NIMDA Agent
    """

    def __init__(self, config: Optional[Dict] = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞"""
        super().__init__(name="DevPlanExecutor", version="2.0.0", config=config or {})

        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.workspace_path = Path(self.config.get("workspace_path", "."))
        self.dev_plan_path = self.workspace_path / "DEV_PLAN.md"
        self.backup_enabled = self.config.get("backup_enabled", True)
        self.max_parallel_tasks = self.config.get("max_parallel_tasks", 3)

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω—É
        self.dev_plan = {
            "phases": {},
            "metadata": {},
            "statistics": {
                "total_tasks": 0,
                "completed_tasks": 0,
                "failed_tasks": 0,
                "current_phase": None,
            },
        }

        # –ü–æ—Ç–æ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        self.current_phase = None
        self.current_section = None
        self.execution_queue = []
        self.running_tasks = []

        # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        self.task_execution_times = []
        self.phase_completion_times = {}

        self.logger.info("DevPlanExecutorPlugin —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    async def execute(
        self, task: Dict[str, Any], context: Optional[Dict] = None
    ) -> PluginResult:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞

        Args:
            task: –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

        Returns:
            PluginResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        start_time = time.time()
        self.update_status(PluginStatus.RUNNING)

        try:
            task_type = task.get("type", "")

            if task_type == "parse_dev_plan":
                result = await self._parse_dev_plan()
            elif task_type == "execute_phase":
                phase_name = task.get("phase_name")
                result = await self._execute_phase(phase_name)
            elif task_type == "execute_section":
                phase_name = task.get("phase_name")
                section_name = task.get("section_name")
                result = await self._execute_section(phase_name, section_name)
            elif task_type == "execute_task":
                task_data = task.get("task_data")
                result = await self._execute_task(task_data)
            elif task_type == "get_progress":
                result = await self._get_progress()
            elif task_type == "optimize_execution":
                result = await self._optimize_execution()
            else:
                result = PluginResult(
                    success=False, message=f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è: {task_type}"
                )

            execution_time = time.time() - start_time
            result.execution_time = execution_time
            self.task_execution_times.append(execution_time)

            if result.success:
                self.update_status(PluginStatus.COMPLETED)
            else:
                self.update_status(PluginStatus.ERROR)

            return result

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
            execution_time = time.time() - start_time

            self.update_status(PluginStatus.ERROR)

            return PluginResult(
                success=False,
                message=f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}",
                execution_time=execution_time,
                error=e,
            )

    async def _parse_dev_plan(self) -> PluginResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN.md —Ñ–∞–π–ª—É"""
        try:
            if not self.dev_plan_path.exists():
                return PluginResult(
                    success=False,
                    message=f"DEV_PLAN.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {self.dev_plan_path}",
                )

            content = self.dev_plan_path.read_text(encoding="utf-8")

            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–∑
            phases = self._extract_phases(content)
            self.dev_plan["phases"] = phases

            # –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            metadata = self._extract_metadata(content)
            self.dev_plan["metadata"] = metadata

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_tasks = sum(
                len(section.get("tasks", []))
                for phase in phases.values()
                for section in phase.get("sections", {}).values()
            )

            self.dev_plan["statistics"]["total_tasks"] = total_tasks

            self.logger.info(
                f"DEV_PLAN –ø–∞—Ä—Å–µ–Ω–æ: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å"
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è GUI
            self.update_gui(
                {
                    "type": "dev_plan_parsed",
                    "phases": list(phases.keys()),
                    "total_tasks": total_tasks,
                    "metadata": metadata,
                }
            )

            return PluginResult(
                success=True,
                message=f"DEV_PLAN —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–µ–Ω–æ: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å",
                data={
                    "phases": phases,
                    "metadata": metadata,
                    "statistics": self.dev_plan["statistics"],
                },
            )

        except Exception as e:
            return PluginResult(
                success=False, message=f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN: {e}", error=e
            )

    def _extract_phases(self, content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–∞–∑ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        phases = {}

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É —Ñ–∞–∑
        phase_pattern = r"## üéÆ (Phase \d+): (.+?)\n(.*?)(?=## üéÆ Phase|\## üìä|\Z)"

        for match in re.finditer(phase_pattern, content, re.DOTALL):
            phase_id = match.group(1)
            phase_title = match.group(2).strip()
            phase_content = match.group(3)

            sections = self._extract_sections(phase_content)

            phases[phase_id] = {
                "title": phase_title,
                "sections": sections,
                "status": "pending",
            }

        return phases

    def _extract_sections(self, phase_content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ñ–∞–∑–∏"""
        sections = {}

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É —Å–µ–∫—Ü—ñ–π
        section_pattern = r"### (\d+\.\d+) (.+?)\n(.*?)(?=### \d+\.\d+|\Z)"

        for match in re.finditer(section_pattern, phase_content, re.DOTALL):
            section_id = match.group(1)
            section_title = match.group(2).strip()
            section_content = match.group(3)

            tasks = self._extract_tasks(section_content)

            sections[section_id] = {
                "title": section_title,
                "tasks": tasks,
                "status": "pending",
            }

        return sections

    def _extract_tasks(self, section_content: str) -> List[Dict[str, Any]]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–µ–∫—Ü—ñ—ó"""
        tasks = []

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–≤–¥–∞–Ω—å
        task_pattern = r"-\s+\[([ x])\]\s+\*\*(.+?)\*\*\s+-\s+(.+?)(?=\n-|\Z)"

        for match in re.finditer(task_pattern, section_content, re.DOTALL):
            completed = match.group(1) == "x"
            task_name = match.group(2).strip()
            task_description = match.group(3).strip()

            tasks.append(
                {
                    "name": task_name,
                    "description": task_description,
                    "completed": completed,
                    "status": "completed" if completed else "pending",
                }
            )

        return tasks

    def _extract_metadata(self, content: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        metadata = {}

        # –ü–æ—à—É–∫ –≤–µ—Ä—Å—ñ—ó –ø–ª–∞–Ω—É
        version_match = re.search(r"Plan v(\d+\.\d+)", content)
        if version_match:
            metadata["version"] = version_match.group(1)

        # –ü–æ—à—É–∫ –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        date_match = re.search(r"Created.*?(\d{4}-\d{2}-\d{2})", content)
        if date_match:
            metadata["created"] = date_match.group(1)

        # –ü–æ—à—É–∫ —Ü—ñ–ª—å–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        performance_match = re.search(r"(\d+\.\d+)\+ tasks/second", content)
        if performance_match:
            metadata["target_performance"] = float(performance_match.group(1))

        return metadata

    async def _execute_phase(self, phase_name: str) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ–ª–æ—ó —Ñ–∞–∑–∏"""
        if phase_name not in self.dev_plan["phases"]:
            return PluginResult(success=False, message=f"–§–∞–∑–∞ {phase_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        self.current_phase = phase_name
        phase = self.dev_plan["phases"][phase_name]
        phase_start_time = time.time()

        self.logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑–∏: {phase_name}")
        self.update_gui(
            {"type": "phase_started", "phase": phase_name, "title": phase["title"]}
        )

        completed_sections = 0
        failed_sections = 0

        for section_id, section in phase["sections"].items():
            try:
                result = await self._execute_section(phase_name, section_id)
                if result.success:
                    completed_sections += 1
                else:
                    failed_sections += 1

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                progress = completed_sections / len(phase["sections"])
                self.update_progress(progress, f"–°–µ–∫—Ü—ñ—è {section_id} –≤–∏–∫–æ–Ω–∞–Ω–∞")

            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id}: {e}")
                failed_sections += 1

        phase_time = time.time() - phase_start_time
        self.phase_completion_times[phase_name] = phase_time

        success = failed_sections == 0
        phase["status"] = "completed" if success else "failed"

        self.update_gui(
            {
                "type": "phase_completed",
                "phase": phase_name,
                "success": success,
                "completed_sections": completed_sections,
                "failed_sections": failed_sections,
                "execution_time": phase_time,
            }
        )

        return PluginResult(
            success=success,
            message=f"–§–∞–∑–∞ {phase_name} {'–∑–∞–≤–µ—Ä—à–µ–Ω–∞' if success else '–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏'}: {completed_sections}/{len(phase['sections'])} —Å–µ–∫—Ü—ñ–π",
            data={
                "completed_sections": completed_sections,
                "failed_sections": failed_sections,
                "execution_time": phase_time,
            },
        )

    async def _execute_section(self, phase_name: str, section_id: str) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å"""
        phase = self.dev_plan["phases"][phase_name]
        section = phase["sections"][section_id]

        self.current_section = section_id
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id}: {section['title']}")

        completed_tasks = 0
        failed_tasks = 0

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        tasks_to_execute = [task for task in section["tasks"] if not task["completed"]]

        if not tasks_to_execute:
            return PluginResult(
                success=True, message=f"–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_id} –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
            )

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        task_groups = self._group_tasks_for_parallel_execution(tasks_to_execute)

        for group in task_groups:
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –∑–∞–≤–¥–∞–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            tasks_coroutines = [self._execute_task(task) for task in group]
            results = await asyncio.gather(*tasks_coroutines, return_exceptions=True)

            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {result}")
                    failed_tasks += 1
                    group[i]["status"] = "failed"
                elif result.success:
                    completed_tasks += 1
                    group[i]["status"] = "completed"
                    group[i]["completed"] = True
                else:
                    failed_tasks += 1
                    group[i]["status"] = "failed"

        success = failed_tasks == 0
        section["status"] = "completed" if success else "failed"

        return PluginResult(
            success=success,
            message=f"–°–µ–∫—Ü—ñ—è {section_id}: {completed_tasks}/{len(tasks_to_execute)} –∑–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ",
            data={"completed_tasks": completed_tasks, "failed_tasks": failed_tasks},
        )

    def _group_tasks_for_parallel_execution(
        self, tasks: List[Dict]
    ) -> List[List[Dict]]:
        """–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        groups = []
        current_group = []

        for task in tasks:
            # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
            if len(current_group) < self.max_parallel_tasks:
                current_group.append(task)
            else:
                groups.append(current_group)
                current_group = [task]

        if current_group:
            groups.append(current_group)

        return groups

    async def _execute_task(self, task: Dict[str, Any]) -> PluginResult:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        task_name = task.get("name", "Unknown Task")
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {task_name}")

        # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        # –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è GUI
        self.update_gui(
            {"type": "task_progress", "task": task_name, "status": "executing"}
        )

        # –î–µ—Ç–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        success = await self._execute_task_by_type(task)

        return PluginResult(
            success=success,
            message=f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_name} {'–≤–∏–∫–æ–Ω–∞–Ω–æ' if success else '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'}",
        )

    async def _execute_task_by_type(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –π–æ–≥–æ —Ç–∏–ø—É"""
        task_name = task.get("name", "").lower()

        # GUI –∑–∞–≤–¥–∞–Ω–Ω—è
        if any(
            gui_keyword in task_name
            for gui_keyword in ["gui", "interface", "visual", "theme"]
        ):
            return await self._execute_gui_task(task)

        # AI –∑–∞–≤–¥–∞–Ω–Ω—è
        elif any(
            ai_keyword in task_name
            for ai_keyword in ["ai", "neural", "machine learning", "intelligence"]
        ):
            return await self._execute_ai_task(task)

        # –°–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        elif any(
            sys_keyword in task_name
            for sys_keyword in ["system", "performance", "security", "monitoring"]
        ):
            return await self._execute_system_task(task)

        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        else:
            return await self._execute_generic_task(task)

    async def _execute_gui_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è GUI –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.2)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_ai_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è AI –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è AI –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è AI –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.3)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_system_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.15)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _execute_generic_task(self, task: Dict[str, Any]) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {task['name']}")
        await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        return True

    async def _get_progress(self) -> PluginResult:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É"""
        completed_tasks = sum(
            sum(1 for task in section["tasks"] if task["completed"])
            for phase in self.dev_plan["phases"].values()
            for section in phase["sections"].values()
        )

        total_tasks = self.dev_plan["statistics"]["total_tasks"]
        progress = (completed_tasks / total_tasks) if total_tasks > 0 else 0

        return PluginResult(
            success=True,
            message=f"–ü—Ä–æ–≥—Ä–µ—Å: {completed_tasks}/{total_tasks} ({progress:.1%})",
            data={
                "completed_tasks": completed_tasks,
                "total_tasks": total_tasks,
                "progress": progress,
                "current_phase": self.current_phase,
                "current_section": self.current_section,
            },
        )

    async def _optimize_execution(self) -> PluginResult:
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"""
        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        avg_task_time = (
            sum(self.task_execution_times) / len(self.task_execution_times)
            if self.task_execution_times
            else 0
        )

        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if avg_task_time > 0.5:  # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø–æ–≤—ñ–ª—å–Ω–æ
            self.max_parallel_tasks = max(1, self.max_parallel_tasks - 1)
        elif avg_task_time < 0.1:  # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —à–≤–∏–¥–∫–æ
            self.max_parallel_tasks = min(5, self.max_parallel_tasks + 1)

        return PluginResult(
            success=True,
            message=f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è = {self.max_parallel_tasks}",
            data={
                "average_task_time": avg_task_time,
                "max_parallel_tasks": self.max_parallel_tasks,
            },
        )

    def get_supported_tasks(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–≤–¥–∞–Ω—å"""
        return [
            "parse_dev_plan",
            "execute_phase",
            "execute_section",
            "execute_task",
            "get_progress",
            "optimize_execution",
        ]

    def get_gui_configuration(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó GUI –¥–ª—è –ø–ª–∞–≥—ñ–Ω–∞"""
        return {
            "window_type": "adaptive_panel",
            "position": "center",
            "size": {"width": 800, "height": 600},
            "transparency": 0.9,
            "theme": "dark_neon",
            "components": [
                {
                    "type": "progress_bar",
                    "id": "main_progress",
                    "label": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å",
                },
                {
                    "type": "phase_selector",
                    "id": "phase_list",
                    "label": "–§–∞–∑–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
                },
                {"type": "task_grid", "id": "task_overview", "label": "–û–≥–ª—è–¥ –∑–∞–≤–¥–∞–Ω—å"},
                {
                    "type": "performance_chart",
                    "id": "performance_metrics",
                    "label": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
                },
            ],
            "actions": [
                {"id": "start_execution", "label": "–ü–æ—á–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"},
                {"id": "pause_execution", "label": "–ü–∞—É–∑–∞"},
                {"id": "optimize_performance", "label": "–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏"},
            ],
        }
