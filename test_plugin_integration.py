#!/usr/bin/env python3
"""
üß™ –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç —Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è NIMDA Plugin System
–ü–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º DEV_PLAN.md

–°—Ç–≤–æ—Ä–µ–Ω–æ: 15 –ª–∏–ø–Ω—è 2025
–í–µ—Ä—Å—ñ—è: 2.0.0 - Complete Integration Test
"""

import asyncio
import json
import sys
import time
from pathlib import Path
from typing import Any, Dict

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø–ª–∞–≥—ñ–Ω—ñ–≤
sys.path.append(str(Path(__file__).parent))

from plugins.base_plugin import BasePlugin, PluginResult, PluginStatus
from plugins.dev_plan_executor_plugin import DevPlanExecutorPlugin
from plugins.plugin_manager import PluginManager


class NIMDAPluginIntegrationTest:
    """
    –ü–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ø–ª–∞–≥—ñ–Ω—ñ–≤ NIMDA
    """

    def __init__(self, workspace_path: str = "."):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç—É"""
        self.workspace_path = Path(workspace_path)
        self.results = {
            "tests_passed": 0,
            "tests_failed": 0,
            "test_results": [],
            "performance_metrics": {},
            "execution_log": [],
        }

        print("üß™ NIMDA Plugin System Integration Test")
        print("=" * 50)

    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
        try:
            print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")

            # –¢–µ—Å—Ç 1: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞
            await self._test_plugin_initialization()

            # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ DEV_PLAN
            await self._test_dev_plan_parsing()

            # –¢–µ—Å—Ç 3: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
            await self._test_task_execution()

            # –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            await self._test_parallel_execution()

            # –¢–µ—Å—Ç 5: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            await self._test_plugin_manager_integration()

            # –¢–µ—Å—Ç 6: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            await self._test_performance_metrics()

            # –ü—ñ–¥—Å—É–º–æ–∫
            self._print_test_summary()

            return self.results

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return self.results

    async def _test_plugin_initialization(self):
        """–¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞"""
        test_name = "Plugin Initialization"
        print(f"\nüîß –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞
            plugin = DevPlanExecutorPlugin(
                {
                    "workspace_path": str(self.workspace_path),
                    "backup_enabled": True,
                    "max_parallel_tasks": 2,
                }
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
            assert plugin.name == "DevPlanExecutor"
            assert plugin.version == "2.0.0"
            assert plugin.status == PluginStatus.IDLE

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            supported_tasks = plugin.get_supported_tasks()
            expected_tasks = [
                "parse_dev_plan",
                "execute_phase",
                "execute_section",
                "execute_task",
                "get_progress",
                "optimize_execution",
            ]

            for task in expected_tasks:
                assert task in supported_tasks, f"–ó–∞–≤–¥–∞–Ω–Ω—è {task} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è"

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GUI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            gui_config = plugin.get_gui_configuration()
            assert "window_type" in gui_config
            assert "components" in gui_config

            execution_time = time.time() - start_time

            self._log_test_result(
                test_name,
                True,
                f"–ü–ª–∞–≥—ñ–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞ {execution_time:.3f}—Å",
            )
            print("‚úÖ –ü–†–û–ô–î–ï–ù–û")

        except Exception as e:
            self._log_test_result(test_name, False, f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    async def _test_dev_plan_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN"""
        test_name = "DEV_PLAN Parsing"
        print(f"\nüìÑ –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            plugin = DevPlanExecutorPlugin({"workspace_path": str(self.workspace_path)})

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è DEV_PLAN.md
            dev_plan_path = self.workspace_path / "DEV_PLAN.md"
            if not dev_plan_path.exists():
                raise FileNotFoundError(f"DEV_PLAN.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {dev_plan_path}")

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É
            task = {
                "type": "parse_dev_plan",
                "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É DEV_PLAN.md",
            }

            result = await plugin.execute(task)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            assert result.success, f"–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è: {result.message}"
            assert result.data is not None, "–î–∞–Ω—ñ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥—Å—É—Ç–Ω—ñ"
            assert "phases" in result.data, "–§–∞–∑–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ"
            assert "metadata" in result.data, "–ú–µ—Ç–∞–¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ"

            phases = result.data["phases"]
            assert len(phases) > 0, "–§–∞–∑–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–∑
            for phase_name, phase_data in phases.items():
                assert "title" in phase_data, f"–ù–∞–∑–≤–∞ —Ñ–∞–∑–∏ {phase_name} –≤—ñ–¥—Å—É—Ç–Ω—è"
                assert "sections" in phase_data, f"–°–µ–∫—Ü—ñ—ó —Ñ–∞–∑–∏ {phase_name} –≤—ñ–¥—Å—É—Ç–Ω—ñ"

                for section_name, section_data in phase_data["sections"].items():
                    assert "title" in section_data, (
                        f"–ù–∞–∑–≤–∞ —Å–µ–∫—Ü—ñ—ó {section_name} –≤—ñ–¥—Å—É—Ç–Ω—è"
                    )
                    assert "tasks" in section_data, (
                        f"–ó–∞–≤–¥–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó {section_name} –≤—ñ–¥—Å—É—Ç–Ω—ñ"
                    )

            execution_time = time.time() - start_time
            total_tasks = result.data["statistics"]["total_tasks"]

            self._log_test_result(
                test_name,
                True,
                f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å –∑–∞ {execution_time:.3f}—Å",
            )
            print(f"‚úÖ –ü–†–û–ô–î–ï–ù–û: {len(phases)} —Ñ–∞–∑, {total_tasks} –∑–∞–≤–¥–∞–Ω—å")

        except Exception as e:
            self._log_test_result(test_name, False, f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    async def _test_task_execution(self):
        """–¢–µ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        test_name = "Task Execution"
        print(f"\n‚öôÔ∏è –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            plugin = DevPlanExecutorPlugin({"workspace_path": str(self.workspace_path)})

            # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
            test_tasks = [
                {
                    "name": "TestGUITask",
                    "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è GUI –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "completed": False,
                    "status": "pending",
                },
                {
                    "name": "TestAITask",
                    "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "completed": False,
                    "status": "pending",
                },
                {
                    "name": "TestSystemTask",
                    "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "completed": False,
                    "status": "pending",
                },
            ]

            execution_times = []
            successful_tasks = 0

            for test_task in test_tasks:
                task_start = time.time()

                task = {
                    "type": "execute_task",
                    "task_data": test_task,
                    "description": f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {test_task['name']}",
                }

                result = await plugin.execute(task)
                task_time = time.time() - task_start
                execution_times.append(task_time)

                if result.success:
                    successful_tasks += 1
                    print(f"  ‚úÖ {test_task['name']}: {task_time:.3f}—Å")
                else:
                    print(f"  ‚ùå {test_task['name']}: {result.message}")

            execution_time = time.time() - start_time
            avg_task_time = (
                sum(execution_times) / len(execution_times) if execution_times else 0
            )

            assert successful_tasks == len(test_tasks), (
                f"–ù–µ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ: {successful_tasks}/{len(test_tasks)}"
            )

            self._log_test_result(
                test_name,
                True,
                f"–í–∏–∫–æ–Ω–∞–Ω–æ {successful_tasks}/{len(test_tasks)} –∑–∞–≤–¥–∞–Ω—å, —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_task_time:.3f}—Å",
            )
            print(f"‚úÖ –ü–†–û–ô–î–ï–ù–û: {successful_tasks} –∑–∞–≤–¥–∞–Ω—å, avg: {avg_task_time:.3f}—Å")

        except Exception as e:
            self._log_test_result(test_name, False, f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å: {e}")
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    async def _test_parallel_execution(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        test_name = "Parallel Execution"
        print(f"\nüîÑ –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            plugin = DevPlanExecutorPlugin(
                {"workspace_path": str(self.workspace_path), "max_parallel_tasks": 3}
            )

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            test_tasks = []
            for i in range(6):
                test_tasks.append(
                    {
                        "name": f"ParallelTask{i + 1}",
                        "description": f"–ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è {i + 1}",
                        "completed": False,
                        "status": "pending",
                    }
                )

            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
            groups = plugin._group_tasks_for_parallel_execution(test_tasks)

            assert len(groups) >= 2, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≥—Ä—É–ø –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            total_execution_time = 0

            for i, group in enumerate(groups):
                group_start = time.time()

                # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –∑–∞–≤–¥–∞–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ (—Å–∏–º—É–ª—è—Ü—ñ—è)
                tasks_coroutines = []
                for task in group:
                    task_obj = {
                        "type": "execute_task",
                        "task_data": task,
                        "description": f"–ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {task['name']}",
                    }
                    tasks_coroutines.append(plugin.execute(task_obj))

                results = await asyncio.gather(*tasks_coroutines)

                group_time = time.time() - group_start
                total_execution_time += group_time

                successful_in_group = sum(1 for r in results if r.success)
                print(
                    f"  üì¶ –ì—Ä—É–ø–∞ {i + 1}: {successful_in_group}/{len(group)} –∑–∞–≤–¥–∞–Ω—å –∑–∞ {group_time:.3f}—Å"
                )

            execution_time = time.time() - start_time

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —à–≤–∏–¥—à–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ
            # (–≤ —Ä–µ–∞–ª—å–Ω–∏—Ö —É–º–æ–≤–∞—Ö —Ü–µ –±—É–¥–µ –±—ñ–ª—å—à –æ—á–µ–≤–∏–¥–Ω–æ)

            self._log_test_result(
                test_name,
                True,
                f"–ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {len(groups)} –≥—Ä—É–ø –∑–∞ {execution_time:.3f}—Å",
            )
            print(f"‚úÖ –ü–†–û–ô–î–ï–ù–û: {len(groups)} –≥—Ä—É–ø, {len(test_tasks)} –∑–∞–≤–¥–∞–Ω—å")

        except Exception as e:
            self._log_test_result(
                test_name, False, f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}"
            )
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    async def _test_plugin_manager_integration(self):
        """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–ª–∞–≥—ñ–Ω—ñ–≤"""
        test_name = "Plugin Manager Integration"
        print(f"\nüîß –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = PluginManager(max_workers=2)

            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞
            plugin = DevPlanExecutorPlugin({"workspace_path": str(self.workspace_path)})

            success = await manager.register_plugin(plugin)
            assert success, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω"

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            registered_plugin = manager.get_plugin("DevPlanExecutor")
            assert registered_plugin is not None, "–ü–ª–∞–≥—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
            assert registered_plugin.name == plugin.name, "–ù–∞–∑–≤–∞ –ø–ª–∞–≥—ñ–Ω–∞ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î"

            # –¢–µ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
            task = {
                "type": "get_progress",
                "description": "–¢–µ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä",
            }

            result = await manager.execute_task(task)
            assert result.success, (
                f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤–¥–∞–ª–æ—Å—è: {result.message}"
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = manager.get_system_statistics()
            assert stats["total_plugins"] == 1, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞–≥—ñ–Ω—ñ–≤"
            assert stats["total_tasks_executed"] >= 1, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–µ"

            execution_time = time.time() - start_time

            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
            await manager.shutdown()

            self._log_test_result(
                test_name,
                True,
                f"–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞: –ø–ª–∞–≥—ñ–Ω –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ {execution_time:.3f}—Å",
            )
            print("‚úÖ –ü–†–û–ô–î–ï–ù–û")

        except Exception as e:
            self._log_test_result(test_name, False, f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    async def _test_performance_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        test_name = "Performance Metrics"
        print(f"\n‚ö° –¢–µ—Å—Ç: {test_name}")

        try:
            start_time = time.time()

            plugin = DevPlanExecutorPlugin({"workspace_path": str(self.workspace_path)})

            # –ú–Ω–æ–∂–∏–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫
            execution_times = []

            for i in range(10):
                task_start = time.time()

                task = {
                    "type": "optimize_execution",
                    "description": f"–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ {i + 1}",
                }

                result = await plugin.execute(task)
                task_time = time.time() - task_start
                execution_times.append(task_time)

                assert result.success, f"–ó–∞–≤–¥–∞–Ω–Ω—è {i + 1} –Ω–µ –≤–¥–∞–ª–æ—Å—è"

            # –ê–Ω–∞–ª—ñ–∑ –º–µ—Ç—Ä–∏–∫
            min_time = min(execution_times)
            max_time = max(execution_times)
            avg_time = sum(execution_times) / len(execution_times)

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–≥—ñ–Ω–∞
            stats = plugin.get_statistics()

            # –¶—ñ–ª—å–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ DEV_PLAN: 2.5+ tasks/second
            target_performance = 2.5
            actual_performance = 1 / avg_time if avg_time > 0 else 0

            performance_ratio = actual_performance / target_performance

            execution_time = time.time() - start_time

            self.results["performance_metrics"] = {
                "min_execution_time": min_time,
                "max_execution_time": max_time,
                "avg_execution_time": avg_time,
                "target_performance": target_performance,
                "actual_performance": actual_performance,
                "performance_ratio": performance_ratio,
                "plugin_stats": stats,
            }

            performance_status = "‚úÖ" if performance_ratio >= 0.8 else "‚ö†Ô∏è"

            self._log_test_result(
                test_name,
                True,
                f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {actual_performance:.2f} –∑–∞–¥–∞—á/—Å (—Ü—ñ–ª—å: {target_performance}), —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {performance_ratio:.2f}",
            )
            print(f"{performance_status} –ü–†–û–ô–î–ï–ù–û: {actual_performance:.2f} –∑–∞–¥–∞—á/—Å")

        except Exception as e:
            self._log_test_result(
                test_name, False, f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}"
            )
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {e}")

    def _log_test_result(self, test_name: str, success: bool, message: str):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É"""
        if success:
            self.results["tests_passed"] += 1
        else:
            self.results["tests_failed"] += 1

        self.results["test_results"].append(
            {
                "test_name": test_name,
                "success": success,
                "message": message,
                "timestamp": time.time(),
            }
        )

        self.results["execution_log"].append(
            f"{'‚úÖ' if success else '‚ùå'} {test_name}: {message}"
        )

    def _print_test_summary(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print("\n" + "=" * 60)
        print("üéä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        print("=" * 60)

        total_tests = self.results["tests_passed"] + self.results["tests_failed"]
        success_rate = (
            (self.results["tests_passed"] / total_tests * 100) if total_tests > 0 else 0
        )

        print(f"–í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {self.results['tests_passed']}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['tests_failed']}")
        print(f"–†—ñ–≤–µ–Ω—å —É—Å–ø—ñ—Ö—É: {success_rate:.1f}%")

        if self.results.get("performance_metrics"):
            perf = self.results["performance_metrics"]
            print(f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {perf['actual_performance']:.2f} –∑–∞–¥–∞—á/—Å")
            print(f"–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ —Ü—ñ–ª—ñ: {perf['performance_ratio']:.2f}")

        print("=" * 60)

        # –î–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–ò–ô –õ–û–ì:")
        for entry in self.results["execution_log"]:
            print(f"  {entry}")

    async def save_results(self, filename: str = "test_results.json"):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª"""
        results_file = self.workspace_path / filename

        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        self.results["metadata"] = {
            "test_version": "2.0.0",
            "workspace_path": str(self.workspace_path),
            "test_timestamp": time.time(),
            "total_tests": self.results["tests_passed"] + self.results["tests_failed"],
        }

        try:
            with open(results_file, "w", encoding="utf-8") as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)

            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {results_file}")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤"""
    import argparse

    parser = argparse.ArgumentParser(description="NIMDA Plugin System Integration Test")
    parser.add_argument(
        "--workspace", type=str, default=".", help="–®–ª—è—Ö –¥–æ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É"
    )
    parser.add_argument(
        "--save-results", action="store_true", help="–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª"
    )

    args = parser.parse_args()

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    test_runner = NIMDAPluginIntegrationTest(args.workspace)

    try:
        results = await test_runner.run_all_tests()

        if args.save_results:
            await test_runner.save_results()

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–¥—É –≤–∏—Ö–æ–¥—É
        success = results["tests_failed"] == 0
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
