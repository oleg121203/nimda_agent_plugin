#!/usr/bin/env python3
"""
NIMDA Agent System Entry Point
Generated by Deep Context Workflow System

Universal entry point that automatically detects project structure
and starts the appropriate system components
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Any, Dict

# Setup basic logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Add project paths
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Core"))
sys.path.insert(0, str(project_root / "Agents"))
sys.path.insert(0, str(project_root / "Services"))


async def detect_system_configuration() -> Dict[str, Any]:
    """Detect and analyze current system configuration"""
    config = {
        "project_root": project_root,
        "components_available": [],
        "system_capabilities": [],
        "startup_mode": "standard",
    }

    # Check for Core components
    core_path = project_root / "Core"
    if core_path.exists():
        for component_file in [
            "main_controller.py",
            "agent_manager.py",
            "command_engine.py",
        ]:
            if (core_path / component_file).exists():
                config["components_available"].append(component_file.replace(".py", ""))

    # Check for DEV_PLAN.md to understand project intent
    dev_plan = project_root / "DEV_PLAN.md"
    if dev_plan.exists():
        content = dev_plan.read_text()
        if "PySide6" in content:
            config["system_capabilities"].append("gui")
        if "FAISS" in content:
            config["system_capabilities"].append("vector_search")
        if "macOS" in content:
            config["system_capabilities"].append("macos_optimized")

    return config


async def start_nimda_system():
    """Start NIMDA system with intelligent configuration detection"""
    print("🚀 NIMDA AGENT SYSTEM - DEEP CONTEXT MODE")
    print("=" * 60)
    print("🧠 Deep Context | High-Level Architecture | AI-Enhanced")
    print("=" * 60)

    try:
        # Detect system configuration
        print("🔍 Detecting system configuration...")
        config = await detect_system_configuration()

        print(f"📁 Project Root: {config['project_root']}")
        print(f"🔧 Available Components: {', '.join(config['components_available'])}")
        print(f"⚡ System Capabilities: {', '.join(config['system_capabilities'])}")

        # Check if we have the minimum required components
        required_components = ["main_controller", "agent_manager", "command_engine"]
        missing_components = [
            comp
            for comp in required_components
            if comp not in config["components_available"]
        ]

        if missing_components:
            print(f"⚠️  Missing required components: {', '.join(missing_components)}")
            print("💡 Run the deep context workflow to generate missing components")
            return False

        # Import and start core components
        print("🔧 Importing core components...")

        try:
            from agent_manager import AgentManager
            from command_engine import CommandEngine
            from main_controller import MainController
        except ImportError as e:
            print(f"❌ Failed to import components: {e}")
            print("💡 Make sure all components are properly generated")
            return False

        # Initialize system components
        print("🚀 Initializing system components...")

        main_controller = MainController()
        agent_manager = AgentManager()
        command_engine = CommandEngine()

        # Initialize components
        await main_controller.initialize_system()
        await agent_manager.initialize()
        await command_engine.initialize()

        print("✅ All components initialized successfully")

        # Start the system
        print("🎯 Starting NIMDA Agent System...")
        await main_controller.start_system()
        await agent_manager.start()

        print("🎉 NIMDA Agent System started successfully!")
        print("=" * 60)
        print("🔧 System Status:")
        print(f"   • Main Controller: {main_controller.get_system_status()['state']}")
        print(
            f"   • Agent Manager: {'running' if agent_manager.running else 'stopped'}"
        )
        print(
            f"   • Command Engine: Available commands: {len(command_engine.command_registry)}"
        )
        print("=" * 60)
        print("💡 System is now operational. Use Ctrl+C to stop gracefully.")

        # Keep system running
        try:
            while True:
                await asyncio.sleep(1)

                # Periodic health check
                if (
                    hasattr(main_controller, "system_state")
                    and main_controller.system_state != "running"
                ):
                    print(f"⚠️  System state changed to: {main_controller.system_state}")
                    break

        except KeyboardInterrupt:
            print("\n🛑 Shutdown requested by user")

        # Graceful shutdown
        print("🛑 Shutting down NIMDA Agent System...")
        await agent_manager.stop()
        await main_controller.shutdown_system()

        print("🏁 NIMDA Agent System shutdown complete")
        return True

    except Exception as e:
        logger.error(f"💥 System startup failed: {e}")
        print(f"❌ Critical error: {e}")
        return False


def show_system_info():
    """Show system information and capabilities"""
    print("\n📋 NIMDA AGENT SYSTEM INFORMATION")
    print("-" * 40)
    print(f"📁 Project Location: {project_root}")
    print(f"🐍 Python Version: {sys.version}")
    print(f"💻 Platform: {sys.platform}")

    # Check for optional dependencies
    optional_deps = {
        "PySide6": "GUI Framework",
        "FAISS": "Vector Search",
        "PyObjC": "macOS Integration",
    }

    print("\n🔍 Dependency Status:")
    for dep, description in optional_deps.items():
        try:
            __import__(dep.lower())
            print(f"   ✅ {dep}: {description}")
        except ImportError:
            print(f"   ❌ {dep}: {description} (not installed)")


async def main():
    """Main entry point with error handling"""
    try:
        if len(sys.argv) > 1 and sys.argv[1] == "--info":
            show_system_info()
            return 0

        # Start the NIMDA system
        success = await start_nimda_system()
        return 0 if success else 1

    except Exception as e:
        logger.error(f"Fatal error in main: {e}")
        return 1


if __name__ == "__main__":
    print("🎯 NIMDA Agent System - Universal Entry Point")
    print("Generated by Deep Context Workflow System")
    print("Use --info flag for system information\n")

    exit_code = asyncio.run(main())
    sys.exit(exit_code)
