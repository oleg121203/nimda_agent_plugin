#!/usr/bin/env python3
"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É NIMDA Agent Plugin
–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç —Ä–æ–∑—Ä–æ–±–∫–∏
"""

import sys
import json
import argparse
from pathlib import Path
from typing import Dict, Any

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø–ª–∞–≥—ñ–Ω–∞
plugin_dir = Path(__file__).parent
sys.path.insert(0, str(plugin_dir))

from agent import NIMDAAgent


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É NIMDA Agent"""

    parser = argparse.ArgumentParser(
        description="NIMDA Agent - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç —Ä–æ–∑—Ä–æ–±–∫–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –ó–∞–ø—É—Å–∫ —É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
  python run_nimda_agent.py

  # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
  python run_nimda_agent.py --command "—Å—Ç–∞—Ç—É—Å"
  python run_nimda_agent.py --command "–≤–∏–∫–æ–Ω–∞–π –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä 1"
  python run_nimda_agent.py --command "–≤–∏–∫–æ–Ω–∞–π –≤–µ—Å—å –î–ï–í"

  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
  python run_nimda_agent.py --init

  # –ó–∞–ø—É—Å–∫ —É –¥–µ–º–æ–Ω —Ä–µ–∂–∏–º—ñ
  python run_nimda_agent.py --daemon

  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
  python run_nimda_agent.py --setup-github https://github.com/user/repo.git

–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
- "—Å—Ç–∞—Ç—É—Å" - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
- "–¥–æ–ø—Ä–∞—Ü—é–π –¥–µ–≤–ø–ª–∞–Ω" - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É —Ä–æ–∑—Ä–æ–±–∫–∏
- "–≤–∏–∫–æ–Ω–∞–π –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä X" - –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ
- "–≤–∏–∫–æ–Ω–∞–π –≤–µ—Å—å –î–ï–í" - –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –ø–ª–∞–Ω—É
- "—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è" - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Git
- "–≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏" - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
- "—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è" - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
- "–¥–æ–ø–æ–º–æ–≥–∞" - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        """
    )

    parser.add_argument(
        "--project-path",
        type=str,
        default=".",
        help="–®–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: –ø–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è)"
    )

    parser.add_argument(
        "--command",
        type=str,
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
    )

    parser.add_argument(
        "--init",
        action="store_true",
        help="–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É"
    )

    parser.add_argument(
        "--daemon",
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ –¥–µ–º–æ–Ω–∞ (–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥)"
    )

    parser.add_argument(
        "--setup-github",
        type=str,
        metavar="URL",
        help="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"
    )

    parser.add_argument(
        "--config",
        type=str,
        help="–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
    )

    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥"
    )

    parser.add_argument(
        "--json",
        action="store_true",
        help="–í–∏–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON"
    )

    args = parser.parse_args()

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
        project_path = Path(args.project_path).resolve()

        if args.verbose:
            print(f"ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è NIMDA Agent –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É: {project_path}")

        agent = NIMDAAgent(str(project_path))

        # –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
        if args.init:
            handle_init(agent, args)
        elif args.setup_github:
            handle_github_setup(agent, args.setup_github, args)
        elif args.daemon:
            handle_daemon_mode(agent, args)
        elif args.command:
            handle_command(agent, args.command, args)
        else:
            handle_interactive_mode(agent, args)

    except KeyboardInterrupt:
        print("\nüõë –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


def handle_init(agent: NIMDAAgent, args):
    """–û–±—Ä–æ–±–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É"""
    print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É...")

    success = agent.initialize_project()

    if success:
        result = {
            "success": True,
            "message": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ",
            "project_path": str(agent.project_path)
        }
    else:
        result = {
            "success": False,
            "message": "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É"
        }

    output_result(result, args)


def handle_github_setup(agent: NIMDAAgent, github_url: str, args):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub"""
    print(f"üîó –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é: {github_url}")

    result = agent.git_manager.setup_github_remote(github_url)
    output_result(result, args)


def handle_command(agent: NIMDAAgent, command: str, args):
    """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
    if args.verbose:
        print(f"üìù –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command}")

    result = agent.process_command(command)

    # –í–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if "user_message" in result:
        if not args.json:
            print(result["user_message"])

    output_result(result, args)


def handle_daemon_mode(agent: NIMDAAgent, args):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–∂–∏–º—É –¥–µ–º–æ–Ω–∞"""
    print("üîÑ –ó–∞–ø—É—Å–∫ NIMDA Agent —É —Ä–µ–∂–∏–º—ñ –¥–µ–º–æ–Ω–∞...")
    print("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É:")

    while True:
        try:
            command = input("\nNIMDA> ").strip()

            if command.lower() in ['exit', 'quit', '–≤–∏—Ö—ñ–¥']:
                break

            if not command:
                continue

            if command.lower() in ['help', '–¥–æ–ø–æ–º–æ–≥–∞']:
                show_help()
                continue

            result = agent.process_command(command)

            # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if "user_message" in result:
                print(result["user_message"])
            elif result.get("success"):
                print(f"‚úÖ {result.get('message', '–ö–æ–º–∞–Ω–¥—É –≤–∏–∫–æ–Ω–∞–Ω–æ')}")
            else:
                print(f"‚ùå {result.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏')}")

        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    print("\nüëã NIMDA Agent –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    agent.shutdown()


def handle_interactive_mode(agent: NIMDAAgent, args):
    """–û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É"""
    print("ü§ñ NIMDA Agent - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç —Ä–æ–∑—Ä–æ–±–∫–∏")
    print("=" * 60)

    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É
    status = agent.get_status()

    if not args.json:
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {status['project_path']}")
        print(f"üéØ –ü–ª–∞–Ω: {status['dev_plan']['completed_subtasks']}/{status['dev_plan']['total_subtasks']} –ø—ñ–¥–∑–∞–¥–∞—á")
        print(f"üîß Git: {status['git']['current_branch'] if status['git'].get('current_branch') else '–Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}")
        print(f"ü§ñ –°—Ç–∞—Ç—É—Å: {'–ü—Ä–∞—Ü—é—î' if status['agent_running'] else '–ü—Ä–æ—Å—Ç–æ—é—î'}")
        print()

        # –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏
        print("–®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å")
        print("2. –û–Ω–æ–≤–∏—Ç–∏ –ø–ª–∞–Ω —Ä–æ–∑—Ä–æ–±–∫–∏")
        print("3. –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ")
        print("4. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ Git")
        print("5. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
        print("0. –í–∏—Ö—ñ–¥")
        print()

        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-5) –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É: ").strip()

        if choice == "0":
            return
        elif choice == "1":
            result = agent.process_command("—Å—Ç–∞—Ç—É—Å")
        elif choice == "2":
            result = agent.process_command("–¥–æ–ø—Ä–∞—Ü—é–π –¥–µ–≤–ø–ª–∞–Ω")
        elif choice == "3":
            result = agent.process_command("–≤–∏–∫–æ–Ω–∞–π –≤–µ—Å—å –î–ï–í")
        elif choice == "4":
            result = agent.process_command("—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è")
        elif choice == "5":
            handle_daemon_mode(agent, args)
            return
        else:
            result = agent.process_command(choice)

        # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if "user_message" in result:
            print(result["user_message"])
    else:
        output_result(status, args)


def show_help():
    """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏"""
    help_text = """
ü§ñ NIMDA Agent - –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

üìã –†–æ–±–æ—Ç–∞ –∑ –ø–ª–∞–Ω–æ–º —Ä–æ–∑—Ä–æ–±–∫–∏:
  ‚Ä¢ –¥–æ–ø—Ä–∞—Ü—é–π –¥–µ–≤–ø–ª–∞–Ω          - –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ DEV_PLAN.md
  ‚Ä¢ –≤–∏–∫–æ–Ω–∞–π –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä X    - –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∑–∞–¥–∞—á—É
  ‚Ä¢ –≤–∏–∫–æ–Ω–∞–π –≤–µ—Å—å –î–ï–í          - –≤–∏–∫–æ–Ω–∞—Ç–∏ –≤–µ—Å—å –ø–ª–∞–Ω –ø–æ–≤–Ω—ñ—Å—Ç—é

üìä –°—Ç–∞—Ç—É—Å —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
  ‚Ä¢ —Å—Ç–∞—Ç—É—Å                    - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å
  ‚Ä¢ –¥–æ–ø–æ–º–æ–≥–∞                  - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üîß Git —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:
  ‚Ä¢ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è             - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º
  ‚Ä¢ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏         - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫

üöÄ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–æ–º:
  ‚Ä¢ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è             - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É

üí° –ü—Ä–∏–∫–ª–∞–¥–∏:
  ‚Ä¢ "–¥–æ–ø—Ä–∞—Ü—é–π –¥–µ–≤–ø–ª–∞–Ω —ñ –¥–æ–¥–∞–π –Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ"
  ‚Ä¢ "–≤–∏–∫–æ–Ω–∞–π –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä 3"
  ‚Ä¢ "–≤–∏–∫–æ–Ω–∞–π –≤–µ—Å—å –î–ï–í –ø–ª–∞–Ω –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –¥–æ –∫—ñ–Ω—Ü—è"
  ‚Ä¢ "–ø–æ–∫–∞–∂–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç—É"

üîß –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
  ‚Ä¢ exit, quit, –≤–∏—Ö—ñ–¥         - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
  ‚Ä¢ help, –¥–æ–ø–æ–º–æ–≥–∞            - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
"""
    print(help_text)


def output_result(result: Dict[str, Any], args):
    """–í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    if args.json:
        print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        if result.get("success"):
            print(f"‚úÖ {result.get('message', '–û–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ')}")
        else:
            print(f"‚ùå {result.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó')}")

            if "error" in result and args.verbose:
                print(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {result['error']}")


if __name__ == "__main__":
    main()
