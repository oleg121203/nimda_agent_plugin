#!/usr/bin/env python3
"""
üéØ –¢–µ—Å—Ç —Ç—Ä–æ–π–Ω–æ—ó –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è + –∫–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ + —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
"""

import asyncio
from pathlib import Path

from plugins.dev_plan_executor_plugin import DevPlanExecutorPlugin


async def test_triple_parallel_execution():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–æ–π–Ω–æ—ó –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    print("üéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–†–û–ô–ù–û–á –ü–ê–†–ê–õ–ï–õ–¨–ù–û–á –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≥—ñ–Ω–∞
    plugin = DevPlanExecutorPlugin(
        {"workspace_path": str(Path.cwd()), "max_parallel_tasks": 3}
    )

    # –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
    test_tasks = [
        {
            "name": "–°—Ç–≤–æ—Ä–∏—Ç–∏ GUI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "description": "–†–æ–∑—Ä–æ–±–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ —Ç–µ–º–Ω–æ—é —Ç–µ–º–æ—é",
            "completed": False,
            "status": "pending",
        },
        {
            "name": "–†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ AI –∞–ª–≥–æ—Ä–∏—Ç–º",
            "description": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω—É –º–µ—Ä–µ–∂—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö",
            "completed": False,
            "status": "pending",
        },
        {
            "name": "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
            "description": "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            "completed": False,
            "status": "pending",
        },
    ]

    print(f"üìä –¢–µ—Å—Ç—É—î–º–æ {len(test_tasks)} –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç—Ä–æ–π–Ω–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º:")
    print("   1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–∑–≥—ñ–¥–Ω–æ DEV_PLAN)")
    print("   2Ô∏è‚É£ –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É")
    print("   3Ô∏è‚É£ –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    print()

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    results = await plugin._execute_triple_parallel_tasks(test_tasks)

    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("-" * 40)

    overall_success = 0
    total_quality_score = 0

    for i, (task, result) in enumerate(zip(test_tasks, results), 1):
        main_status = "‚úÖ" if result["main"].success else "‚ùå"
        quality_status = "‚úÖ" if result["quality"].success else "‚ùå"
        tools_status = "‚úÖ" if result["tools"].success else "‚ùå"

        quality_score = result["quality_score"]
        total_quality_score += quality_score

        overall_task_success = (
            result["main"].success
            and result["quality"].success
            and result["tools"].success
        )

        if overall_task_success:
            overall_success += 1

        print(f"üéØ –ó–∞–≤–¥–∞–Ω–Ω—è {i}: {task['name']}")
        print(
            f"   –û—Å–Ω–æ–≤–Ω–µ: {main_status} | –Ø–∫—ñ—Å—Ç—å: {quality_status} | –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {tools_status}"
        )
        print(f"   –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ: {quality_score:.1f}%")
        print(
            f"   –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if overall_task_success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û'}"
        )
        print()

    # –ü—ñ–¥—Å—É–º–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    success_rate = (overall_success / len(test_tasks)) * 100
    avg_quality = total_quality_score / len(test_tasks)

    print("üèÜ –ü–Ü–î–°–£–ú–ö–û–í–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
    print(
        f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}% ({overall_success}/{len(test_tasks)})"
    )
    print(f"   üéØ –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {avg_quality:.1f}%")
    print(
        f"   üöÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {'üéä –í–Ü–î–ú–Ü–ù–ù–û' if success_rate >= 80 else '‚ö†Ô∏è –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø'}"
    )

    # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–Ü–†–û–ö:")
    quality_checks = ["imports", "linting", "interactions", "structure", "security"]
    tools_checks = [
        "performance",
        "formatting",
        "complexity",
        "coverage",
        "documentation",
        "dependencies",
    ]

    print("   üîç –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ:")
    for check in quality_checks:
        passed = sum(
            1
            for r in results
            if r["quality"].data
            and r["quality"].data.get("checks", {}).get(check, False)
        )
        print(
            f"      - {check}: {passed}/{len(test_tasks)} ({'‚úÖ' if passed >= len(test_tasks) // 2 else '‚ö†Ô∏è'})"
        )

    print("   üöÄ –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:")
    for check in tools_checks:
        passed = sum(
            1
            for r in results
            if r["tools"].data and r["tools"].data.get("tools", {}).get(check, False)
        )
        print(
            f"      - {check}: {passed}/{len(test_tasks)} ({'‚úÖ' if passed >= len(test_tasks) // 2 else '‚ö†Ô∏è'})"
        )

    print("\nüéØ –í–ò–°–ù–û–í–û–ö:")
    if success_rate >= 80 and avg_quality >= 75:
        print("   üéä –¢—Ä–æ–π–Ω–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –í–Ü–î–ú–Ü–ù–ù–û!")
        print("   ‚ú® –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–æ –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–¥—É")
        print("   üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –ø—Ä–æ–¥–∞–∫—à–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    elif success_rate >= 60:
        print("   ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –¥–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    else:
        print("   ‚ùå –ü–æ—Ç—Ä–µ–±—É—î —Å–µ—Ä–π–æ–∑–Ω–æ–≥–æ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
        print("   üõ†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")

    return {
        "success_rate": success_rate,
        "avg_quality": avg_quality,
        "results": results,
    }


if __name__ == "__main__":
    asyncio.run(test_triple_parallel_execution())
