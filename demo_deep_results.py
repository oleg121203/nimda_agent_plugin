#!/usr/bin/env python3
"""
Quick Demo of Deep Context Workflow Results
Demonstrates the high-level system capabilities
"""

import asyncio
import sys
from pathlib import Path


def show_workflow_results():
    """Show results of the deep context workflow"""
    print("üéØ DEEP CONTEXT WORKFLOW - –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á")
    print("=" * 70)
    print("üß† –°–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏")
    print("=" * 70)

    project_dir = Path(__file__).parent / "nimda_project_deep_build"

    if not project_dir.exists():
        print("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python run_deep_workflow.py")
        return False

    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤: {project_dir}")
    print()

    # Show structure
    print("üèóÔ∏è  –°–¢–†–£–ö–¢–£–†–ê –°–¢–í–û–†–ï–ù–û–ì–û –ü–†–û–ï–ö–¢–£:")
    print("-" * 40)

    try:
        for item in sorted(project_dir.iterdir()):
            if item.is_dir():
                file_count = len(list(item.glob("*")))
                print(f"üìÅ {item.name:<20} ({file_count} —Ñ–∞–π–ª—ñ–≤)")
            else:
                if item.suffix in [".py", ".md", ".json"]:
                    size_kb = item.stat().st_size // 1024
                    print(f"üìÑ {item.name:<20} ({size_kb} KB)")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")

    print()

    # Show key files
    print("üîß –ö–õ–Æ–ß–û–í–Ü –ö–û–ú–ü–û–ù–ï–ù–¢–ò:")
    print("-" * 30)

    key_files = {
        "Core/main_controller.py": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏",
        "Core/agent_manager.py": "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞–º–∏ —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏",
        "Core/command_engine.py": "–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–ª–∞–≥—ñ–Ω–∏",
        "run_nimda.py": "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏",
        "README.md": "–ü–æ–≤–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É",
    }

    for file_path, description in key_files.items():
        full_path = project_dir / file_path
        if full_path.exists():
            size_kb = full_path.stat().st_size // 1024
            print(f"‚úÖ {file_path:<25} - {description} ({size_kb} KB)")
        else:
            print(f"‚ùå {file_path:<25} - {description} (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)")

    print()

    # Show phase results
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò 7 –§–ê–ó DEEP CONTEXT ANALYSIS:")
    print("-" * 50)

    for phase in range(8):
        phase_file = project_dir / f"DEEP_WORKFLOW_PHASE_{phase}_RESULTS.json"
        if phase_file.exists():
            size_kb = phase_file.stat().st_size // 1024
            phase_names = [
                "–ì–ª–∏–±–æ–∫–µ –†–æ–∑—É–º—ñ–Ω–Ω—è –ö–æ–Ω—Ç–µ–∫—Å—Ç—É",
                "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è Legacy –°–∏—Å—Ç–µ–º–∏",
                "–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ –ü–æ–±—É–¥–æ–≤–∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∏",
                "–ì–ª–∏–±–æ–∫–∏–π –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –ê–Ω–∞–ª—ñ–∑",
                "–í–∏—Å–æ–∫–æ—Ä—ñ–≤–Ω–µ–≤–∞ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π Development",
                "–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
                "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Ç–∞ Knowledge Capture",
            ]
            if phase < len(phase_names):
                print(f"‚úÖ –§–∞–∑–∞ {phase}: {phase_names[phase]} ({size_kb} KB)")

    print()
    return True


async def demo_system_capabilities():
    """Demonstrate system capabilities"""
    project_dir = Path(__file__).parent / "nimda_project_deep_build"

    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô –°–ò–°–¢–ï–ú–ò:")
    print("-" * 40)

    # Test system information
    print("üìã 1. –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è...")
    try:
        import subprocess

        result = subprocess.run(
            [sys.executable, "run_nimda.py", "--info"],
            cwd=project_dir,
            capture_output=True,
            text=True,
            timeout=10,
        )
        if result.returncode == 0:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: {e}")

    # Test component imports
    print("\nüîß 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
    sys.path.insert(0, str(project_dir / "Core"))

    components = [
        ("main_controller", "MainController"),
        ("agent_manager", "AgentManager"),
        ("command_engine", "CommandEngine"),
    ]

    for module_name, class_name in components:
        try:
            module = __import__(module_name)
            component_class = getattr(module, class_name)
            print(f"   ‚úÖ {class_name}: –Ü–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π")
        except Exception as e:
            print(f"   ‚ùå {class_name}: –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É - {e}")

    print("\nüéØ 3. –ó–∞–≥–∞–ª—å–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏...")

    # Check completeness
    required_dirs = ["Core", "Agents", "GUI", "Services", "Utils", "Tests"]
    existing_dirs = sum(1 for d in required_dirs if (project_dir / d).exists())

    required_files = ["run_nimda.py", "README.md"]
    existing_files = sum(1 for f in required_files if (project_dir / f).exists())

    core_components = ["main_controller.py", "agent_manager.py", "command_engine.py"]
    existing_components = sum(
        1 for c in core_components if (project_dir / "Core" / c).exists()
    )

    total_score = (
        existing_dirs / len(required_dirs) * 30
        + existing_files / len(required_files) * 30
        + existing_components / len(core_components) * 40
    )

    print(
        f"   üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π: {existing_dirs}/{len(required_dirs)} ({existing_dirs / len(required_dirs) * 100:.0f}%)"
    )
    print(
        f"   üìÑ –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏: {existing_files}/{len(required_files)} ({existing_files / len(required_files) * 100:.0f}%)"
    )
    print(
        f"   üîß Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: {existing_components}/{len(core_components)} ({existing_components / len(core_components) * 100:.0f}%)"
    )
    print(f"   üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å: {total_score:.0f}%")

    if total_score >= 90:
        print("   üéâ –°–∏—Å—Ç–µ–º–∞ –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ê –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
    elif total_score >= 70:
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∑ –Ω–µ–∑–Ω–∞—á–Ω–∏–º–∏ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è–º–∏")
    else:
        print("   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏")


def show_next_steps():
    """Show next steps for using the system"""
    print("\nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("-" * 20)
    print("1. cd nimda_project_deep_build")
    print("2. python run_nimda.py --info    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏")
    print("3. python run_nimda.py           # –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏")
    print("4. python Core/main_controller.py # –¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞")
    print("5. pip install PySide6 PyObjC    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è GUI")
    print("\nüí° –í—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ - workflow –ø—Ä–∞—Ü—é—î –≤ –æ–∫—Ä–µ–º—ñ–π –ø–∞–ø—Ü—ñ!")
    print("üß† –°–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏")


async def main():
    """Main demo function"""
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø DEEP CONTEXT WORKFLOW –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í")
    print("=" * 60)

    # Show results
    if not show_workflow_results():
        return 1

    print()

    # Demo capabilities
    await demo_system_capabilities()

    # Show next steps
    show_next_steps()

    print("\n" + "=" * 60)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
    print("üöÄ Deep Context Workflow System —Å—Ç–≤–æ—Ä–∏–≤ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω—É NIMDA —Å–∏—Å—Ç–µ–º—É")
    print("üß† –∑ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏!")
    print("=" * 60)

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
